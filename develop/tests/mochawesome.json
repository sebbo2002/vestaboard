{
  "stats": {
    "suites": 24,
    "tests": 58,
    "passes": 50,
    "pending": 8,
    "failures": 0,
    "start": "2024-03-19T08:24:07.183Z",
    "end": "2024-03-19T08:24:17.271Z",
    "duration": 10088,
    "testsRegistered": 58,
    "passPercent": 100,
    "pendingPercent": 13.793103448275861,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4bb4f935-3564-4e42-89d6-8f19e57feac4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "160d6a72-ba06-4c2d-bbdd-4c4b42a03fd1",
          "title": "LocalAPI",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/local-api.ts",
          "file": "/test/lib/local-api.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b7e4e5be-f6be-4602-9f39-9acf53d67b43",
              "title": "getCurrentMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/local-api.ts",
              "file": "/test/lib/local-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked by device)",
                  "fullTitle": "LocalAPI getCurrentMessage() should work (mocked by device)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'http://vestaboard.local:7000/local-api/message');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Vestaboard-Local-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () {\n                return ({\n                    message: msg.toCharArray()\n                });\n            })\n        };\n    });\n    const api = new LocalAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', undefined, { fetch });\n    const result = yield api.getCurrentMessage();\n    assert.deepStrictEqual(result.toCharArray(), msg.toCharArray());\n});",
                  "err": {},
                  "uuid": "e6640d37-4dee-4925-a204-e03f0d46851d",
                  "parentUUID": "b7e4e5be-f6be-4602-9f39-9acf53d67b43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (mocked by docs)",
                  "fullTitle": "LocalAPI getCurrentMessage() should work (mocked by docs)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'http://vestaboard.local:7000/local-api/message');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Vestaboard-Local-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () { return msg.toCharArray(); })\n        };\n    });\n    const api = new LocalAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', undefined, { fetch });\n    const result = yield api.getCurrentMessage();\n    assert.deepStrictEqual(result.toCharArray(), msg.toCharArray());\n});",
                  "err": {},
                  "uuid": "ae6173d7-1f00-4ad8-9e18-11b717d259f5",
                  "parentUUID": "b7e4e5be-f6be-4602-9f39-9acf53d67b43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "LocalAPI getCurrentMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "ed5cc98f-2208-4783-b503-7fc920e181b0",
                  "parentUUID": "b7e4e5be-f6be-4602-9f39-9acf53d67b43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6640d37-4dee-4925-a204-e03f0d46851d",
                "ae6173d7-1f00-4ad8-9e18-11b717d259f5"
              ],
              "failures": [],
              "pending": [
                "ed5cc98f-2208-4783-b503-7fc920e181b0"
              ],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "4db8c885-eeaa-46c3-a5bc-6f0f571404cd",
              "title": "postMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/local-api.ts",
              "file": "/test/lib/local-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "LocalAPI postMessage() should work (mocked)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message('Hello World');\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'http://vestaboard.local:7000/local-api/message');\n        assert.deepStrictEqual(options, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Vestaboard-Local-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n            },\n            body: JSON.stringify(msg.toCharArray())\n        });\n        return {\n            ok: true,\n            status: 201,\n            statusText: 'CREATED',\n            json: () => __awaiter(this, void 0, void 0, function* () { return (''); })\n        };\n    });\n    const api = new LocalAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', undefined, { fetch });\n    yield api.postMessage('Hello World');\n});",
                  "err": {},
                  "uuid": "b0bd5eef-1c05-4c4c-a2ab-a95cf69cf181",
                  "parentUUID": "4db8c885-eeaa-46c3-a5bc-6f0f571404cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "LocalAPI postMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "31f65cd2-a786-4157-ad4d-b3280b7e0f0c",
                  "parentUUID": "4db8c885-eeaa-46c3-a5bc-6f0f571404cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0bd5eef-1c05-4c4c-a2ab-a95cf69cf181"
              ],
              "failures": [],
              "pending": [
                "31f65cd2-a786-4157-ad4d-b3280b7e0f0c"
              ],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e69b72f9-0af9-45e6-958c-d91038aef1ad",
          "title": "Message",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
          "file": "/test/lib/message.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9e182f3a-d740-4d46-a276-b1cc52a7af39",
              "title": "constructor",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should center the message given",
                  "fullTitle": "Message constructor should center the message given",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Message('Hello World').toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#           H E L L O   W O R L D              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "69358eb8-6dfe-4244-9257-e4e0aa2b9638",
                  "parentUUID": "9e182f3a-d740-4d46-a276-b1cc52a7af39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also support a char array",
                  "fullTitle": "Message constructor should also support a char array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥🟧🟨🟩🟦🟪 ');\nassert.deepStrictEqual(new Message(msg.toCharArray()).toCharArray(), msg.toCharArray());",
                  "err": {},
                  "uuid": "30573dd9-1e46-4036-a7ed-26fd95bc6481",
                  "parentUUID": "9e182f3a-d740-4d46-a276-b1cc52a7af39",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69358eb8-6dfe-4244-9257-e4e0aa2b9638",
                "30573dd9-1e46-4036-a7ed-26fd95bc6481"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ef52326f-f6ef-4fbf-b657-29e50950e7a5",
              "title": "static string2chars()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message static string2chars() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('Hello'), [8, 5, 12, 12, 15]);",
                  "err": {},
                  "uuid": "7ad4c5bd-e812-4a6d-94ca-effcbcccaa16",
                  "parentUUID": "ef52326f-f6ef-4fbf-b657-29e50950e7a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle german umlauts",
                  "fullTitle": "Message static string2chars() should handle german umlauts",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('Käse'), [11, 1, 5, 19, 5]);",
                  "err": {},
                  "uuid": "8e2b52df-12cd-46d4-96bd-cac34a302c91",
                  "parentUUID": "ef52326f-f6ef-4fbf-b657-29e50950e7a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle color emojis",
                  "fullTitle": "Message static string2chars() should handle color emojis",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('🟥🟧🟨🟩🟦🟪⬜⬛'), [63, 64, 65, 66, 67, 68, 69, 0]);",
                  "err": {},
                  "uuid": "edf7d3d0-cdfb-4a59-9c56-c79098381bac",
                  "parentUUID": "ef52326f-f6ef-4fbf-b657-29e50950e7a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove special chars",
                  "fullTitle": "Message static string2chars() should remove special chars",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('H⍷llo', { fallbackChar: null }), [8, 12, 12, 15]);\nassert.deepStrictEqual(Message.string2chars('H⍷llo'), [8, 60, 12, 12, 15]);",
                  "err": {},
                  "uuid": "a66ab8a7-7b54-4d19-bd4f-85a7bd9e192f",
                  "parentUUID": "ef52326f-f6ef-4fbf-b657-29e50950e7a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with all charts defined in CHAR_MAP",
                  "fullTitle": "Message static string2chars() should work with all charts defined in CHAR_MAP",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let text = '';\nconst result = [];\nCHAR_MAP.forEach(([str, chars]) => {\n    // assert.strictEqual(char.length, 1, `Char \"${char}\" has a length of ${char.length}`);\n    const actual = Message.string2chars(str, { removeUnsupportedWords: false });\n    const expected = chars.length !== 1 || chars[0] !== -2 ? chars : [0];\n    assert.deepStrictEqual(actual, expected, `Unable to process char \"${str}\": string2chars returned ${JSON.stringify(actual)}, but expected result was ${JSON.stringify(expected)}`);\n    text += str;\n    result.push(...expected);\n});\nassert.deepStrictEqual(Message.string2chars(text, { removeUnsupportedWords: false }), result);",
                  "err": {},
                  "uuid": "293fd670-90ee-44c8-9820-34bc72c4e32f",
                  "parentUUID": "ef52326f-f6ef-4fbf-b657-29e50950e7a5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ad4c5bd-e812-4a6d-94ca-effcbcccaa16",
                "8e2b52df-12cd-46d4-96bd-cac34a302c91",
                "edf7d3d0-cdfb-4a59-9c56-c79098381bac",
                "a66ab8a7-7b54-4d19-bd4f-85a7bd9e192f",
                "293fd670-90ee-44c8-9820-34bc72c4e32f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1e7fafdb-321d-48a1-84b8-c6059b000f03",
              "title": "static splitCharsIntoLines()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should split words by whitespace",
                  "fullTitle": "Message static splitCharsIntoLines() should split words by whitespace",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const chars = Message.string2chars('Hello World');\nassert.deepEqual(Message.splitCharsIntoLines(chars, [22, 22]), [\n    [\n        8,\n        5,\n        12,\n        12,\n        15,\n        0,\n        23,\n        15,\n        18,\n        12,\n        4\n    ]\n]);\nassert.deepEqual(Message.splitCharsIntoLines(chars, [8, 8]), [\n    [\n        8,\n        5,\n        12,\n        12,\n        15\n    ],\n    [\n        23,\n        15,\n        18,\n        12,\n        4\n    ]\n]);",
                  "err": {},
                  "uuid": "a2a3f574-5111-4357-b8a6-f68b4eedef11",
                  "parentUUID": "1e7fafdb-321d-48a1-84b8-c6059b000f03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should split words by dash",
                  "fullTitle": "Message static splitCharsIntoLines() should split words by dash",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const chars = Message.string2chars('Hello-World');\nassert.deepEqual(Message.splitCharsIntoLines(chars, [22, 22]), [\n    [\n        8,\n        5,\n        12,\n        12,\n        15,\n        44,\n        23,\n        15,\n        18,\n        12,\n        4\n    ]\n]);\nassert.deepEqual(Message.splitCharsIntoLines(chars, [8, 8]), [\n    [\n        8,\n        5,\n        12,\n        12,\n        15,\n        44,\n    ],\n    [\n        23,\n        15,\n        18,\n        12,\n        4\n    ]\n]);",
                  "err": {},
                  "uuid": "1c785568-de65-4678-b32f-2974b474f7d7",
                  "parentUUID": "1e7fafdb-321d-48a1-84b8-c6059b000f03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should auto-split very long words",
                  "fullTitle": "Message static splitCharsIntoLines() should auto-split very long words",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const chars = Message.string2chars('Rindfleischetikettierungsueberwachungsaufgabenuebertragungsgesetz');\nassert.deepEqual(Message.splitCharsIntoLines(chars, [22, 22]), [\n    [\n        18,\n        9,\n        14,\n        4,\n        6,\n        12,\n        5,\n        9,\n        19,\n        3,\n        8,\n        5,\n        20,\n        9,\n        11,\n        5,\n        20,\n        20,\n        9,\n        5,\n        18,\n        44\n    ],\n    [\n        21,\n        14,\n        7,\n        19,\n        21,\n        5,\n        2,\n        5,\n        18,\n        23,\n        1,\n        3,\n        8,\n        21,\n        14,\n        7,\n        19,\n        1,\n        21,\n        6,\n        7,\n        44\n    ],\n    [\n        1,\n        2,\n        5,\n        14,\n        21,\n        5,\n        2,\n        5,\n        18,\n        20,\n        18,\n        1,\n        7,\n        21,\n        14,\n        7,\n        19,\n        7,\n        5,\n        19,\n        5,\n        44,\n    ],\n    [\n        20,\n        26\n    ]\n]);",
                  "err": {},
                  "uuid": "be709550-9a79-4216-b92a-194edb554af9",
                  "parentUUID": "1e7fafdb-321d-48a1-84b8-c6059b000f03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2a3f574-5111-4357-b8a6-f68b4eedef11",
                "1c785568-de65-4678-b32f-2974b474f7d7",
                "be709550-9a79-4216-b92a-194edb554af9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ee4820c-894a-4484-b380-8dde82fbbd77",
              "title": "static removeEmojisFromChars()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not trim texts without emoji words",
                  "fullTitle": "Message static removeEmojisFromChars() should not trim texts without emoji words",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('Hello World'), [\n    8,\n    5,\n    12,\n    12,\n    15,\n    0,\n    23,\n    15,\n    18,\n    12,\n    4\n]);",
                  "err": {},
                  "uuid": "0e791000-5075-4c32-9ace-cd01e467f11b",
                  "parentUUID": "7ee4820c-894a-4484-b380-8dde82fbbd77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim emoji prefixes",
                  "fullTitle": "Message static removeEmojisFromChars() should trim emoji prefixes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('👋🏼Hello')), [8, 5, 12, 12, 15]);\nassert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('👋🏼 Hello')), [8, 5, 12, 12, 15]);",
                  "err": {},
                  "uuid": "e030760d-ea34-4bb5-92a0-9536b8f31453",
                  "parentUUID": "7ee4820c-894a-4484-b380-8dde82fbbd77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim emoji postfixes",
                  "fullTitle": "Message static removeEmojisFromChars() should trim emoji postfixes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('Hello👋🏼')), [8, 5, 12, 12, 15]);\nassert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('Hello 👋🏼')), [8, 5, 12, 12, 15]);",
                  "err": {},
                  "uuid": "36745b85-d45a-43f7-a1a4-76b49602fe47",
                  "parentUUID": "7ee4820c-894a-4484-b380-8dde82fbbd77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim emoji words",
                  "fullTitle": "Message static removeEmojisFromChars() should trim emoji words",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('Hello 👋🏼👋🏼 World')), [8, 5, 12, 12, 15, 0, 23, 15, 18, 12, 4]);",
                  "err": {},
                  "uuid": "f63b989a-727f-4b57-a141-cd28be2da01f",
                  "parentUUID": "7ee4820c-894a-4484-b380-8dde82fbbd77",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e791000-5075-4c32-9ace-cd01e467f11b",
                "e030760d-ea34-4bb5-92a0-9536b8f31453",
                "36745b85-d45a-43f7-a1a4-76b49602fe47",
                "f63b989a-727f-4b57-a141-cd28be2da01f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8928d1be-484c-4c5b-ad28-56d043eb1164",
              "title": "static getColumnSizesFromData()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with a very basic example",
                  "fullTitle": "Message static getColumnSizesFromData() should work with a very basic example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.getColumnSizesFromData([\n    ['now', 'Daily'],\n    ['13:00', 'Secret Meeting']\n]), [6, 15]);",
                  "err": {},
                  "uuid": "6038746c-4767-4601-ab95-4ab210c8174a",
                  "parentUUID": "8928d1be-484c-4c5b-ad28-56d043eb1164",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Message static getColumnSizesFromData() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.getColumnSizesFromData([]), []);",
                  "err": {},
                  "uuid": "7c111fc9-f68b-4516-863d-62dd1ffa9f49",
                  "parentUUID": "8928d1be-484c-4c5b-ad28-56d043eb1164",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with only one column",
                  "fullTitle": "Message static getColumnSizesFromData() should work with only one column",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.getColumnSizesFromData([\n    ['Daily'],\n    ['Secret Meeting']\n]), [22]);",
                  "err": {},
                  "uuid": "c585c443-f288-4d3f-aa1b-9a76ffe9fb42",
                  "parentUUID": "8928d1be-484c-4c5b-ad28-56d043eb1164",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if length is not enough",
                  "fullTitle": "Message static getColumnSizesFromData() should work if length is not enough",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.getColumnSizesFromData([\n    ['now', 'Daily'],\n    ['13:00', 'Super Secret Meeting']\n]), [5, 16]);",
                  "err": {},
                  "uuid": "b1a4a0bf-cc1b-49d0-b365-c90e2559cb74",
                  "parentUUID": "8928d1be-484c-4c5b-ad28-56d043eb1164",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if rows have different number of columns",
                  "fullTitle": "Message static getColumnSizesFromData() should throw error if rows have different number of columns",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(() => {\n    new Message().table([\n        ['now', 'Daily'],\n        ['13:00', 'Secret Meeting', '🟥']\n    ]);\n}, /Unable to render table: Row 1 has 3 entries, but first row has 2!/);",
                  "err": {},
                  "uuid": "324f0979-58cd-4ca2-8854-6ea9bc83ceb3",
                  "parentUUID": "8928d1be-484c-4c5b-ad28-56d043eb1164",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6038746c-4767-4601-ab95-4ab210c8174a",
                "7c111fc9-f68b-4516-863d-62dd1ffa9f49",
                "c585c443-f288-4d3f-aa1b-9a76ffe9fb42",
                "b1a4a0bf-cc1b-49d0-b365-c90e2559cb74",
                "324f0979-58cd-4ca2-8854-6ea9bc83ceb3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d76b1fd-0a35-433b-ace7-0540f7c2c012",
              "title": "fill()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with default",
                  "fullTitle": "Message fill() should work with default",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World');\nmsg.fill();\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "c584022f-75a9-498f-9de6-ea2888bacef9",
                  "parentUUID": "4d76b1fd-0a35-433b-ace7-0540f7c2c012",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with single chars",
                  "fullTitle": "Message fill() should work with single chars",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "2c443bcb-3253-4a21-bf2c-34e41edda1c2",
                  "parentUUID": "4d76b1fd-0a35-433b-ace7-0540f7c2c012",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with multiple chars",
                  "fullTitle": "Message fill() should work with multiple chars",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥🟧🟨🟩🟦🟪');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# 🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩 #\\n' +\n    '# 🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧 #\\n' +\n    '# 🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪 #\\n' +\n    '# 🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩 #\\n' +\n    '# 🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧 #\\n' +\n    '# 🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪 #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "43151045-401a-4174-b261-671c551f2e53",
                  "parentUUID": "4d76b1fd-0a35-433b-ace7-0540f7c2c012",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c584022f-75a9-498f-9de6-ea2888bacef9",
                "2c443bcb-3253-4a21-bf2c-34e41edda1c2",
                "43151045-401a-4174-b261-671c551f2e53"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22c5ce04-547f-43a5-b088-bdef905751dd",
              "title": "write()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should start writing from top/left",
                  "fullTitle": "Message write() should start writing from top/left",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# H E L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "2621217d-a1f9-4760-a04b-50bea1098a84",
                  "parentUUID": "22c5ce04-547f-43a5-b088-bdef905751dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept line & row for positioning",
                  "fullTitle": "Message write() should accept line & row for positioning",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World', {\n    position: {\n        line: 2,\n        row: 5\n    }\n});\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#           H E L L O   W O R L D              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "abab9b44-699b-4aa6-a9e8-980499500009",
                  "parentUUID": "22c5ce04-547f-43a5-b088-bdef905751dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add another line if text is too long",
                  "fullTitle": "Message write() should add another line if text is too long",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Lorem ipsum dolor sit amet, ' +\n    'consetetur sadipscing elitr, sed ' +\n    'diam nonumy eirmod tempor invidunt');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# L O R E M   I P S U M   D O L O R   S I T    #\\n' +\n    '# A M E T ,   C O N S E T E T U R              #\\n' +\n    '# S A D I P S C I N G   E L I T R ,   S E D    #\\n' +\n    '# D I A M   N O N U M Y   E I R M O D          #\\n' +\n    '# T E M P O R   I N V I D U N T                #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "6534cb56-7a9f-4413-a69b-af4725129e99",
                  "parentUUID": "22c5ce04-547f-43a5-b088-bdef905751dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with words > board length",
                  "fullTitle": "Message write() should work with words > board length",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Lorem-ipsum-dolor-sit-amet');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# L O R E M - I P S U M - D O L O R - S I T -  #\\n' +\n    '# A M E T                                      #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "2450c79f-7601-4f57-ba21-18674a9ee250",
                  "parentUUID": "22c5ce04-547f-43a5-b088-bdef905751dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow to use NEXT_LINE flag",
                  "fullTitle": "Message write() should allow to use NEXT_LINE flag",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('13:00', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('Daily', { indent: true });\nmsg.write('', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('18:00', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('Fischstäbchen, Spinat & Ei', { indent: true });\nmsg.write('', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('20:00', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('Sandmännchen', { indent: true });\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# 1 3 : 0 0   D A I L Y                        #\\n' +\n    '#                                              #\\n' +\n    '# 1 8 : 0 0   F I S C H S T A E B C H E N ,    #\\n' +\n    '#             S P I N A T   &   E I            #\\n' +\n    '#                                              #\\n' +\n    '# 2 0 : 0 0   S A N D M A E N N C H E N        #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "505c3e3e-a40b-4f32-9faf-db285ad68c5b",
                  "parentUUID": "22c5ce04-547f-43a5-b088-bdef905751dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support the NO_SPACE_BETWEEN flag",
                  "fullTitle": "Message write() should support the NO_SPACE_BETWEEN flag",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Rindfleisch')\n    .write('etikettierungs', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('ueberwachungs', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('aufgaben', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('uebertragungs', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('gesetz', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('(das)');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# R I N D F L E I S C H                        #\\n' +\n    '# E T I K E T T I E R U N G S                  #\\n' +\n    '# U E B E R W A C H U N G S A U F G A B E N    #\\n' +\n    '# U E B E R T R A G U N G S G E S E T Z        #\\n' +\n    '# ( D A S )                                    #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "550d5041-f153-4340-a3d3-96dd9374b25f",
                  "parentUUID": "22c5ce04-547f-43a5-b088-bdef905751dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support \\n",
                  "fullTitle": "Message write() should support \\n",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Message()\n    .write('Hello\\nWorld')\n    .toString(), '#==============================================#\\n' +\n    '# H E L L O                                    #\\n' +\n    '# W O R L D                                    #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');\nassert.strictEqual(new Message()\n    .write('H⍷llo World', { fallbackChar: 0 })\n    .toString(), '#==============================================#\\n' +\n    '# H   L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');\nassert.strictEqual(new Message()\n    .write('H⍷llo World', { fallbackChar: null })\n    .toString(), '#==============================================#\\n' +\n    '# H L L O   W O R L D                          #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "82fe5e82-1aca-47c7-a547-52de6c1c53d4",
                  "parentUUID": "22c5ce04-547f-43a5-b088-bdef905751dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle the fallback char",
                  "fullTitle": "Message write() should handle the fallback char",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Message()\n    .write('H⍷llo World')\n    .toString(), '#==============================================#\\n' +\n    '# H ? L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');\nassert.strictEqual(new Message()\n    .write('H⍷llo World', { fallbackChar: 0 })\n    .toString(), '#==============================================#\\n' +\n    '# H   L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');\nassert.strictEqual(new Message()\n    .write('H⍷llo World', { fallbackChar: null })\n    .toString(), '#==============================================#\\n' +\n    '# H L L O   W O R L D                          #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "d795cc77-95ce-48ce-b6be-6efbd66c1a8f",
                  "parentUUID": "22c5ce04-547f-43a5-b088-bdef905751dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove unsupported words by default",
                  "fullTitle": "Message write() should remove unsupported words by default",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('💪🏼 Gym');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# G Y M                                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "a3018898-95ec-4564-babc-6a398e26f22e",
                  "parentUUID": "22c5ce04-547f-43a5-b088-bdef905751dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not break if message is way too long",
                  "fullTitle": "Message write() should not break if message is way too long",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Lorem ipsum dolor sit amet, consectetur adipisici elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua.');\nmsg.write('Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat.');\nmsg.write('Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.');\nmsg.write('Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# L O R E M   I P S U M   D O L O R   S I T    #\\n' +\n    '# A M E T ,   C O N S E C T E T U R            #\\n' +\n    '# A D I P I S I C I   E L I T ,   S E D        #\\n' +\n    '# E I U S M O D   T E M P O R I N C I D U N T  #\\n' +\n    '# U T   L A B O R E   E T   D O L O R E        #\\n' +\n    '# M A G N A   A L I Q U A .   U T   E N I M    #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "66d4fffa-04fc-4531-9910-0c011d31a199",
                  "parentUUID": "22c5ce04-547f-43a5-b088-bdef905751dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2621217d-a1f9-4760-a04b-50bea1098a84",
                "abab9b44-699b-4aa6-a9e8-980499500009",
                "6534cb56-7a9f-4413-a69b-af4725129e99",
                "2450c79f-7601-4f57-ba21-18674a9ee250",
                "505c3e3e-a40b-4f32-9faf-db285ad68c5b",
                "550d5041-f153-4340-a3d3-96dd9374b25f",
                "82fe5e82-1aca-47c7-a547-52de6c1c53d4",
                "d795cc77-95ce-48ce-b6be-6efbd66c1a8f",
                "a3018898-95ec-4564-babc-6a398e26f22e",
                "66d4fffa-04fc-4531-9910-0c011d31a199"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0d7728e7-5c54-487f-8da2-f40d95f9533a",
              "title": "table()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with a very basic example",
                  "fullTitle": "Message table() should work with a very basic example",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.table([\n    ['now', 'Daily'],\n    ['13:00', 'Secret Meeting']\n]);\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# N O W         D A I L Y                      #\\n' +\n    '#                                              #\\n' +\n    '# 1 3 : 0 0     S E C R E T   M E E T I N G    #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "980ca237-2297-4b0d-af9b-17bdd346df69",
                  "parentUUID": "0d7728e7-5c54-487f-8da2-f40d95f9533a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should just fill the space available if too full",
                  "fullTitle": "Message table() should just fill the space available if too full",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.table([\n    ['now', 'Daily'],\n    ['13:00', 'Super Secret Meeting'],\n    ['16:30', 'Awesome Presentation']\n]);\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# N O W       D A I L Y                        #\\n' +\n    '#                                              #\\n' +\n    '# 1 3 : 0 0   S U P E R   S E C R E T          #\\n' +\n    '#             M E E T I N G                    #\\n' +\n    '#                                              #\\n' +\n    '# 1 6 : 3 0   A W E S O M E   P R E S E N T -  #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "3e5d86fd-73df-4eea-b5da-fef21d130bef",
                  "parentUUID": "0d7728e7-5c54-487f-8da2-f40d95f9533a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pay attention to the cursor",
                  "fullTitle": "Message table() should pay attention to the cursor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World\\n');\nmsg.table([\n    ['now', 'Daily'],\n    ['13:00', 'Secret Meeting']\n]);\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# H E L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '# N O W         D A I L Y                      #\\n' +\n    '#                                              #\\n' +\n    '# 1 3 : 0 0     S E C R E T   M E E T I N G    #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "6c6bec31-482a-46dc-8fbf-1644653643cc",
                  "parentUUID": "0d7728e7-5c54-487f-8da2-f40d95f9533a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if rows have different number of columns",
                  "fullTitle": "Message table() should throw error if rows have different number of columns",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nassert.throws(() => {\n    msg.table([\n        ['now', 'Daily'],\n        ['13:00', 'Secret Meeting', '🟥']\n    ]);\n}, /Unable to render table: Row 1 has 3 entries, but first row has 2!/);",
                  "err": {},
                  "uuid": "73dd057f-ef76-4d56-b363-83ac4d996e2c",
                  "parentUUID": "0d7728e7-5c54-487f-8da2-f40d95f9533a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "980ca237-2297-4b0d-af9b-17bdd346df69",
                "3e5d86fd-73df-4eea-b5da-fef21d130bef",
                "6c6bec31-482a-46dc-8fbf-1644653643cc",
                "73dd057f-ef76-4d56-b363-83ac4d996e2c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "abb4a95d-9064-46f8-a320-d09f124fdf6e",
              "title": "center()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with a single word",
                  "fullTitle": "Message center() should work with a single word",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World');\nmsg.center();\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#           H E L L O   W O R L D              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "527f6d77-bd38-45a6-902b-5d35fc7972ea",
                  "parentUUID": "abb4a95d-9064-46f8-a320-d09f124fdf6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with a complete filled board",
                  "fullTitle": "Message center() should work with a complete filled board",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥');\nmsg.center();\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "b5d8772e-ccfa-4e7e-a42e-06a72efdb8ae",
                  "parentUUID": "abb4a95d-9064-46f8-a320-d09f124fdf6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if word is not top/left aligned",
                  "fullTitle": "Message center() should also work if word is not top/left aligned",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World', {\n    position: {\n        line: 5,\n        row: 11\n    }\n});\nmsg.center();\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#           H E L L O   W O R L D              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "4591c4f5-3417-436a-89d4-2b1ba8cd9344",
                  "parentUUID": "abb4a95d-9064-46f8-a320-d09f124fdf6e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "527f6d77-bd38-45a6-902b-5d35fc7972ea",
                "b5d8772e-ccfa-4e7e-a42e-06a72efdb8ae",
                "4591c4f5-3417-436a-89d4-2b1ba8cd9344"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "835bc403-5170-4ae3-9c96-8c5e1670f7f1",
          "title": "MultipleBoard",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/multiple-boards.ts",
          "file": "/test/lib/multiple-boards.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ac3e25f9-f07f-452e-a922-eff982f02b67",
              "title": "postMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/multiple-boards.ts",
              "file": "/test/lib/multiple-boards.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (live)",
                  "fullTitle": "MultipleBoard postMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7c75376f-53ad-44d1-ae11-c11f556b7e84",
                  "parentUUID": "ac3e25f9-f07f-452e-a922-eff982f02b67",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "7c75376f-53ad-44d1-ae11-c11f556b7e84"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ca3cb142-ba35-4ae6-a0ed-0c774471361b",
          "title": "ReadWriteAPI",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/read-write-api.ts",
          "file": "/test/lib/read-write-api.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2f89a02d-4199-464d-866f-c3908fc364cd",
              "title": "getCurrentMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/read-write-api.ts",
              "file": "/test/lib/read-write-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "ReadWriteAPI getCurrentMessage() should work (mocked)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const json = {\n        currentMessage: {\n            layout: JSON.stringify(msg.toCharArray())\n        }\n    };\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://rw.vestaboard.com/');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Vestaboard-Read-Write-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () { return json; })\n        };\n    });\n    const api = new ReadWriteAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', { fetch });\n    const result = yield api.getCurrentMessage();\n    assert.deepStrictEqual(result.toCharArray(), msg.toCharArray());\n});",
                  "err": {},
                  "uuid": "8f97ab1e-84ab-4369-9ff8-86051dcc4380",
                  "parentUUID": "2f89a02d-4199-464d-866f-c3908fc364cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "ReadWriteAPI getCurrentMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f15ad16c-0ad8-4d6f-b74d-022a73bbd655",
                  "parentUUID": "2f89a02d-4199-464d-866f-c3908fc364cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f97ab1e-84ab-4369-9ff8-86051dcc4380"
              ],
              "failures": [],
              "pending": [
                "f15ad16c-0ad8-4d6f-b74d-022a73bbd655"
              ],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "4274ab21-ebdd-4dff-bbb5-7309ac99531d",
              "title": "postMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/read-write-api.ts",
              "file": "/test/lib/read-write-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "ReadWriteAPI postMessage() should work (mocked)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://rw.vestaboard.com/');\n        assert.deepStrictEqual(options, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Vestaboard-Read-Write-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n            },\n            body: JSON.stringify(msg.toCharArray())\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () {\n                return ({\n                    status: 'ok'\n                });\n            })\n        };\n    });\n    const api = new ReadWriteAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', { fetch });\n    yield api.postMessage(msg);\n});",
                  "err": {},
                  "uuid": "0f89f64c-7b09-4c37-8e19-aaf02ee2cedf",
                  "parentUUID": "4274ab21-ebdd-4dff-bbb5-7309ac99531d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "ReadWriteAPI postMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "e4b11db8-71f2-450f-8324-4672dc5dd145",
                  "parentUUID": "4274ab21-ebdd-4dff-bbb5-7309ac99531d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f89f64c-7b09-4c37-8e19-aaf02ee2cedf"
              ],
              "failures": [],
              "pending": [
                "e4b11db8-71f2-450f-8324-4672dc5dd145"
              ],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "eb877d26-74af-44fe-9b10-1b2e8ebd8c45",
          "title": "SubscriptionAPI",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/subscription-api.ts",
          "file": "/test/lib/subscription-api.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "03984e24-db2a-4109-ba0d-da343eb55986",
              "title": "getViewer()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/subscription-api.ts",
              "file": "/test/lib/subscription-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "SubscriptionAPI getViewer() should work (mocked)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const json = {\n        type: 'installation',\n        _id: 'f35032ce-fd2b-4afb-8a24-d71c8085303c',\n        _created: '1577829607582',\n        installation: {\n            _id: '562038d1-6fdb-4ba5-ae8b-bc9ec882178d'\n        }\n    };\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://platform.vestaboard.com/viewer');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Vestaboard-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958',\n                'X-Vestaboard-Api-Secret': '******************************'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () { return json; })\n        };\n    });\n    const api = new SubscriptionAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', '******************************', { fetch });\n    const result = yield api.getViewer();\n    assert.deepStrictEqual(result, json);\n});",
                  "err": {},
                  "uuid": "d9a66ad3-7690-47a2-b0e1-ab8ec1b610dd",
                  "parentUUID": "03984e24-db2a-4109-ba0d-da343eb55986",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "SubscriptionAPI getViewer() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "13923c5e-0ac0-40d4-8bf0-83a9710beea1",
                  "parentUUID": "03984e24-db2a-4109-ba0d-da343eb55986",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9a66ad3-7690-47a2-b0e1-ab8ec1b610dd"
              ],
              "failures": [],
              "pending": [
                "13923c5e-0ac0-40d4-8bf0-83a9710beea1"
              ],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "014a1d6b-ff34-4f1b-89bf-692077cb5d1e",
              "title": "getSubscription()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/subscription-api.ts",
              "file": "/test/lib/subscription-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "SubscriptionAPI getSubscription() should work (mocked)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const json = {\n        subscriptions: [\n            {\n                _id: 'bc6412b3-3aa6-4684-8962-cd2876942c0d',\n                _created: '1577833654294',\n                installation: {\n                    _id: 'fefb8778-9500-4522-b115-29c0dd13c402',\n                    installable: {\n                        _id: 'b629d7df-7ecb-4460-b51e-f87fa942f113'\n                    }\n                },\n                boards: [{\n                        _id: 'a1e866f2-e77e-45d8-997a-2e3ebeff4961'\n                    }]\n            }\n        ]\n    };\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://platform.vestaboard.com/subscriptions');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Vestaboard-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958',\n                'X-Vestaboard-Api-Secret': '******************************'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () { return json; })\n        };\n    });\n    const api = new SubscriptionAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', '******************************', { fetch });\n    const result = yield api.getSubscriptions();\n    assert.deepStrictEqual(result, json);\n});",
                  "err": {},
                  "uuid": "1bf0d25d-cf87-473a-bd38-2625af8995e4",
                  "parentUUID": "014a1d6b-ff34-4f1b-89bf-692077cb5d1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "SubscriptionAPI getSubscription() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "67fd230e-5970-4ca5-8e28-3af5973934e4",
                  "parentUUID": "014a1d6b-ff34-4f1b-89bf-692077cb5d1e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1bf0d25d-cf87-473a-bd38-2625af8995e4"
              ],
              "failures": [],
              "pending": [
                "67fd230e-5970-4ca5-8e28-3af5973934e4"
              ],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "6294fc9a-016f-41fb-a33b-f7fd580189a3",
              "title": "postMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/subscription-api.ts",
              "file": "/test/lib/subscription-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (single mode)",
                  "fullTitle": "SubscriptionAPI postMessage() should work (single mode)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://platform.vestaboard.com/subscriptions/foo/message');\n        assert.deepStrictEqual(options, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Vestaboard-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958',\n                'X-Vestaboard-Api-Secret': '******************************'\n            },\n            body: JSON.stringify({ characters: msg.toCharArray() })\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () {\n                return ({\n                    message: {\n                        id: '',\n                        created: 1\n                    }\n                });\n            })\n        };\n    });\n    const api = new SubscriptionAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', '******************************', { fetch });\n    const result = yield api.postMessage(msg, 'foo');\n    assert.deepStrictEqual(result, {\n        message: {\n            id: '',\n            created: 1\n        }\n    });\n});",
                  "err": {},
                  "uuid": "872c6f51-4a38-4226-a629-054149e39e7d",
                  "parentUUID": "6294fc9a-016f-41fb-a33b-f7fd580189a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (multi mode)",
                  "fullTitle": "SubscriptionAPI postMessage() should work (multi mode)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        const msg = new Message('Hello World');\n        assert.strictEqual(url, 'https://platform.vestaboard.com/subscriptions/foo/message');\n        assert.deepStrictEqual(options, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Vestaboard-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958',\n                'X-Vestaboard-Api-Secret': '******************************'\n            },\n            body: JSON.stringify({ characters: msg.toCharArray() })\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () {\n                return ({\n                    message: {\n                        id: '',\n                        created: 1\n                    }\n                });\n            })\n        };\n    });\n    const api = new SubscriptionAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', '******************************', { fetch });\n    const result = yield api.postMessage('Hello World', ['foo', 'foo']);\n    assert.deepStrictEqual(result, [\n        {\n            message: {\n                id: '',\n                created: 1\n            }\n        },\n        {\n            message: {\n                id: '',\n                created: 1\n            }\n        }\n    ]);\n});",
                  "err": {},
                  "uuid": "abcaaf70-8f63-4801-9b60-9611017b8c36",
                  "parentUUID": "6294fc9a-016f-41fb-a33b-f7fd580189a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "SubscriptionAPI postMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "0cdd19a0-ce9f-4cb0-ba2c-d1a297c77ba9",
                  "parentUUID": "6294fc9a-016f-41fb-a33b-f7fd580189a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "872c6f51-4a38-4226-a629-054149e39e7d",
                "abcaaf70-8f63-4801-9b60-9611017b8c36"
              ],
              "failures": [],
              "pending": [
                "0cdd19a0-ce9f-4cb0-ba2c-d1a297c77ba9"
              ],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "876f7bff-cac6-4458-bba0-acff6f6508f7",
          "title": "Tools",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/tools.ts",
          "file": "/test/lib/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d7220357-33fb-4e14-b225-e88d8f05e98d",
              "title": "request",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/tools.ts",
              "file": "/test/lib/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work as intended",
                  "fullTitle": "Tools request should work as intended",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://example.com/test');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Test-Header': '1337'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () { return ({ foo: 'bar' }); })\n        };\n    });\n    const response = yield request('https://example.com/test', {\n        'X-Test-Header': '1337'\n    }, undefined, { fetch });\n    assert.deepStrictEqual(response, { foo: 'bar' });\n});",
                  "err": {},
                  "uuid": "e8277d96-3bda-470d-b212-e2c77caa9a86",
                  "parentUUID": "d7220357-33fb-4e14-b225-e88d8f05e98d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on non 2xx status codes",
                  "fullTitle": "Tools request should throw error on non 2xx status codes",
                  "timedOut": false,
                  "duration": 10012,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://example.com/test');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Test-Header': '1337'\n            }\n        });\n        return {\n            ok: false,\n            status: 500,\n            statusText: 'ERROR',\n            json: () => __awaiter(this, void 0, void 0, function* () { return (''); })\n        };\n    });\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield request('https://example.com/test', {\n            'X-Test-Header': '1337'\n        }, undefined, { fetch });\n    }), /HTTP Request failed/);\n});",
                  "err": {},
                  "uuid": "d4b61586-b0a4-4c9c-8507-9e6f71cb811d",
                  "parentUUID": "d7220357-33fb-4e14-b225-e88d8f05e98d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8277d96-3bda-470d-b212-e2c77caa9a86",
                "d4b61586-b0a4-4c9c-8507-9e6f71cb811d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10012,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}