{
  "stats": {
    "suites": 24,
    "tests": 58,
    "passes": 50,
    "pending": 8,
    "failures": 0,
    "start": "2023-06-14T18:40:37.710Z",
    "end": "2023-06-14T18:40:47.819Z",
    "duration": 10109,
    "testsRegistered": 58,
    "passPercent": 100,
    "pendingPercent": 13.793103448275861,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "249e8d8b-c4b1-40af-bb3f-b592cbf86735",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a038ecc3-ed00-436e-b7ab-7f0ec0b38dcc",
          "title": "LocalAPI",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/local-api.ts",
          "file": "/test/lib/local-api.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "eef60b32-1e50-465a-ae91-aeb6139b66bc",
              "title": "getCurrentMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/local-api.ts",
              "file": "/test/lib/local-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked by device)",
                  "fullTitle": "LocalAPI getCurrentMessage() should work (mocked by device)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'http://vestaboard.local:7000/local-api/message');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Vestaboard-Local-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () {\n                return ({\n                    message: msg.toCharArray()\n                });\n            })\n        };\n    });\n    const api = new LocalAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', undefined, { fetch });\n    const result = yield api.getCurrentMessage();\n    assert.deepStrictEqual(result.toCharArray(), msg.toCharArray());\n});",
                  "err": {},
                  "uuid": "8cda0b0c-8086-4737-a941-95a5ef9c2e10",
                  "parentUUID": "eef60b32-1e50-465a-ae91-aeb6139b66bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (mocked by docs)",
                  "fullTitle": "LocalAPI getCurrentMessage() should work (mocked by docs)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'http://vestaboard.local:7000/local-api/message');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Vestaboard-Local-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () { return msg.toCharArray(); })\n        };\n    });\n    const api = new LocalAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', undefined, { fetch });\n    const result = yield api.getCurrentMessage();\n    assert.deepStrictEqual(result.toCharArray(), msg.toCharArray());\n});",
                  "err": {},
                  "uuid": "579ee960-5475-4dd3-a96a-c06df20dfebe",
                  "parentUUID": "eef60b32-1e50-465a-ae91-aeb6139b66bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "LocalAPI getCurrentMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7f652e8f-2cb9-40e9-a7ae-75e0b3af7052",
                  "parentUUID": "eef60b32-1e50-465a-ae91-aeb6139b66bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8cda0b0c-8086-4737-a941-95a5ef9c2e10",
                "579ee960-5475-4dd3-a96a-c06df20dfebe"
              ],
              "failures": [],
              "pending": [
                "7f652e8f-2cb9-40e9-a7ae-75e0b3af7052"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "075186df-4a5d-413b-846c-b81a9e7c8848",
              "title": "postMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/local-api.ts",
              "file": "/test/lib/local-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "LocalAPI postMessage() should work (mocked)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message('Hello World');\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'http://vestaboard.local:7000/local-api/message');\n        assert.deepStrictEqual(options, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Vestaboard-Local-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n            },\n            body: JSON.stringify(msg.toCharArray())\n        });\n        return {\n            ok: true,\n            status: 201,\n            statusText: 'CREATED',\n            json: () => __awaiter(this, void 0, void 0, function* () { return (''); })\n        };\n    });\n    const api = new LocalAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', undefined, { fetch });\n    yield api.postMessage('Hello World');\n});",
                  "err": {},
                  "uuid": "c7e0fc18-6a97-43e3-ad1b-4a44294c8ac9",
                  "parentUUID": "075186df-4a5d-413b-846c-b81a9e7c8848",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "LocalAPI postMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "65836502-e0fb-4d74-a0ff-633dc93fccf0",
                  "parentUUID": "075186df-4a5d-413b-846c-b81a9e7c8848",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7e0fc18-6a97-43e3-ad1b-4a44294c8ac9"
              ],
              "failures": [],
              "pending": [
                "65836502-e0fb-4d74-a0ff-633dc93fccf0"
              ],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ebbbf4e4-4b19-4ef8-b578-ee5002a28985",
          "title": "Message",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
          "file": "/test/lib/message.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b8428230-1905-4a13-a398-c7d79034f354",
              "title": "constructor",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should center the message given",
                  "fullTitle": "Message constructor should center the message given",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Message('Hello World').toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#           H E L L O   W O R L D              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "38eea392-c2e3-4a1c-afa3-108894ff4bb1",
                  "parentUUID": "b8428230-1905-4a13-a398-c7d79034f354",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also support a char array",
                  "fullTitle": "Message constructor should also support a char array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥🟧🟨🟩🟦🟪 ');\nassert.deepStrictEqual(new Message(msg.toCharArray()).toCharArray(), msg.toCharArray());",
                  "err": {},
                  "uuid": "fcad915c-44eb-469e-b463-48daad7b50a9",
                  "parentUUID": "b8428230-1905-4a13-a398-c7d79034f354",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38eea392-c2e3-4a1c-afa3-108894ff4bb1",
                "fcad915c-44eb-469e-b463-48daad7b50a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3e989f5a-a6fd-404e-8472-942c7e571dcb",
              "title": "static string2chars()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message static string2chars() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('Hello'), [8, 5, 12, 12, 15]);",
                  "err": {},
                  "uuid": "91d1edd3-2eb4-4d3f-9427-992861ce686d",
                  "parentUUID": "3e989f5a-a6fd-404e-8472-942c7e571dcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle german umlauts",
                  "fullTitle": "Message static string2chars() should handle german umlauts",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('Käse'), [11, 1, 5, 19, 5]);",
                  "err": {},
                  "uuid": "f08cc79b-d8df-4ef2-9432-51578d6d1396",
                  "parentUUID": "3e989f5a-a6fd-404e-8472-942c7e571dcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle color emojis",
                  "fullTitle": "Message static string2chars() should handle color emojis",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('🟥🟧🟨🟩🟦🟪⬜⬛'), [63, 64, 65, 66, 67, 68, 69, 0]);",
                  "err": {},
                  "uuid": "61597170-97af-4ced-9e70-61e3d0d2b0b7",
                  "parentUUID": "3e989f5a-a6fd-404e-8472-942c7e571dcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove special chars",
                  "fullTitle": "Message static string2chars() should remove special chars",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('H⍷llo', { fallbackChar: null }), [8, 12, 12, 15]);\nassert.deepStrictEqual(Message.string2chars('H⍷llo'), [8, 60, 12, 12, 15]);",
                  "err": {},
                  "uuid": "6e1af723-5db7-4188-9ae5-b14d6bc067ca",
                  "parentUUID": "3e989f5a-a6fd-404e-8472-942c7e571dcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with all charts defined in CHAR_MAP",
                  "fullTitle": "Message static string2chars() should work with all charts defined in CHAR_MAP",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let text = '';\nconst result = [];\nCHAR_MAP.forEach(([str, chars]) => {\n    // assert.strictEqual(char.length, 1, `Char \"${char}\" has a length of ${char.length}`);\n    const actual = Message.string2chars(str, { removeUnsupportedWords: false });\n    const expected = chars.length !== 1 || chars[0] !== -2 ? chars : [0];\n    assert.deepStrictEqual(actual, expected, `Unable to process char \"${str}\": string2chars returned ${JSON.stringify(actual)}, but expected result was ${JSON.stringify(expected)}`);\n    text += str;\n    result.push(...expected);\n});\nassert.deepStrictEqual(Message.string2chars(text, { removeUnsupportedWords: false }), result);",
                  "err": {},
                  "uuid": "65369b13-4ad3-4d60-9ac2-ee8f95ca24de",
                  "parentUUID": "3e989f5a-a6fd-404e-8472-942c7e571dcb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91d1edd3-2eb4-4d3f-9427-992861ce686d",
                "f08cc79b-d8df-4ef2-9432-51578d6d1396",
                "61597170-97af-4ced-9e70-61e3d0d2b0b7",
                "6e1af723-5db7-4188-9ae5-b14d6bc067ca",
                "65369b13-4ad3-4d60-9ac2-ee8f95ca24de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "95204d27-f7e7-41dc-9b90-9f5a78d004de",
              "title": "static splitCharsIntoLines()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should split words by whitespace",
                  "fullTitle": "Message static splitCharsIntoLines() should split words by whitespace",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const chars = Message.string2chars('Hello World');\nassert.deepEqual(Message.splitCharsIntoLines(chars, [22, 22]), [\n    [\n        8,\n        5,\n        12,\n        12,\n        15,\n        0,\n        23,\n        15,\n        18,\n        12,\n        4\n    ]\n]);\nassert.deepEqual(Message.splitCharsIntoLines(chars, [8, 8]), [\n    [\n        8,\n        5,\n        12,\n        12,\n        15\n    ],\n    [\n        23,\n        15,\n        18,\n        12,\n        4\n    ]\n]);",
                  "err": {},
                  "uuid": "b2ca46ab-4837-430e-a052-d3c0e9ffff75",
                  "parentUUID": "95204d27-f7e7-41dc-9b90-9f5a78d004de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should split words by dash",
                  "fullTitle": "Message static splitCharsIntoLines() should split words by dash",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const chars = Message.string2chars('Hello-World');\nassert.deepEqual(Message.splitCharsIntoLines(chars, [22, 22]), [\n    [\n        8,\n        5,\n        12,\n        12,\n        15,\n        44,\n        23,\n        15,\n        18,\n        12,\n        4\n    ]\n]);\nassert.deepEqual(Message.splitCharsIntoLines(chars, [8, 8]), [\n    [\n        8,\n        5,\n        12,\n        12,\n        15,\n        44,\n    ],\n    [\n        23,\n        15,\n        18,\n        12,\n        4\n    ]\n]);",
                  "err": {},
                  "uuid": "fc04a9b4-8682-4152-a8c1-fe46caae71b6",
                  "parentUUID": "95204d27-f7e7-41dc-9b90-9f5a78d004de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should auto-split very long words",
                  "fullTitle": "Message static splitCharsIntoLines() should auto-split very long words",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const chars = Message.string2chars('Rindfleischetikettierungsueberwachungsaufgabenuebertragungsgesetz');\nassert.deepEqual(Message.splitCharsIntoLines(chars, [22, 22]), [\n    [\n        18,\n        9,\n        14,\n        4,\n        6,\n        12,\n        5,\n        9,\n        19,\n        3,\n        8,\n        5,\n        20,\n        9,\n        11,\n        5,\n        20,\n        20,\n        9,\n        5,\n        18,\n        44\n    ],\n    [\n        21,\n        14,\n        7,\n        19,\n        21,\n        5,\n        2,\n        5,\n        18,\n        23,\n        1,\n        3,\n        8,\n        21,\n        14,\n        7,\n        19,\n        1,\n        21,\n        6,\n        7,\n        44\n    ],\n    [\n        1,\n        2,\n        5,\n        14,\n        21,\n        5,\n        2,\n        5,\n        18,\n        20,\n        18,\n        1,\n        7,\n        21,\n        14,\n        7,\n        19,\n        7,\n        5,\n        19,\n        5,\n        44,\n    ],\n    [\n        20,\n        26\n    ]\n]);",
                  "err": {},
                  "uuid": "0f0dbac2-43a8-4c60-b6e6-1cfa464329f6",
                  "parentUUID": "95204d27-f7e7-41dc-9b90-9f5a78d004de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2ca46ab-4837-430e-a052-d3c0e9ffff75",
                "fc04a9b4-8682-4152-a8c1-fe46caae71b6",
                "0f0dbac2-43a8-4c60-b6e6-1cfa464329f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "198488fc-4748-47f1-be92-3327a06026e2",
              "title": "static removeEmojisFromChars()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not trim texts without emoji words",
                  "fullTitle": "Message static removeEmojisFromChars() should not trim texts without emoji words",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('Hello World'), [\n    8,\n    5,\n    12,\n    12,\n    15,\n    0,\n    23,\n    15,\n    18,\n    12,\n    4\n]);",
                  "err": {},
                  "uuid": "ab121f3e-8e12-4091-ba7c-432813660247",
                  "parentUUID": "198488fc-4748-47f1-be92-3327a06026e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim emoji prefixes",
                  "fullTitle": "Message static removeEmojisFromChars() should trim emoji prefixes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('👋🏼Hello')), [8, 5, 12, 12, 15]);\nassert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('👋🏼 Hello')), [8, 5, 12, 12, 15]);",
                  "err": {},
                  "uuid": "7a1f2330-8f95-43ca-a2bc-7ab88a9d8272",
                  "parentUUID": "198488fc-4748-47f1-be92-3327a06026e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim emoji postfixes",
                  "fullTitle": "Message static removeEmojisFromChars() should trim emoji postfixes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('Hello👋🏼')), [8, 5, 12, 12, 15]);\nassert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('Hello 👋🏼')), [8, 5, 12, 12, 15]);",
                  "err": {},
                  "uuid": "895c157c-b8c5-432b-a8eb-00cb55af87e3",
                  "parentUUID": "198488fc-4748-47f1-be92-3327a06026e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim emoji words",
                  "fullTitle": "Message static removeEmojisFromChars() should trim emoji words",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('Hello 👋🏼👋🏼 World')), [8, 5, 12, 12, 15, 0, 23, 15, 18, 12, 4]);",
                  "err": {},
                  "uuid": "a5e440be-d8fe-46f1-867e-6e3dcbd0a7b0",
                  "parentUUID": "198488fc-4748-47f1-be92-3327a06026e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab121f3e-8e12-4091-ba7c-432813660247",
                "7a1f2330-8f95-43ca-a2bc-7ab88a9d8272",
                "895c157c-b8c5-432b-a8eb-00cb55af87e3",
                "a5e440be-d8fe-46f1-867e-6e3dcbd0a7b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1e56c2d9-56e4-4d1d-ac75-eac0a39f6943",
              "title": "static getColumnSizesFromData()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with a very basic example",
                  "fullTitle": "Message static getColumnSizesFromData() should work with a very basic example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.getColumnSizesFromData([\n    ['now', 'Daily'],\n    ['13:00', 'Secret Meeting']\n]), [6, 15]);",
                  "err": {},
                  "uuid": "e165b445-af1e-48a4-84ab-a21fdc3033ce",
                  "parentUUID": "1e56c2d9-56e4-4d1d-ac75-eac0a39f6943",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Message static getColumnSizesFromData() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.getColumnSizesFromData([]), []);",
                  "err": {},
                  "uuid": "19666557-cea6-4530-923f-bb2bb71378cc",
                  "parentUUID": "1e56c2d9-56e4-4d1d-ac75-eac0a39f6943",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with only one column",
                  "fullTitle": "Message static getColumnSizesFromData() should work with only one column",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.getColumnSizesFromData([\n    ['Daily'],\n    ['Secret Meeting']\n]), [22]);",
                  "err": {},
                  "uuid": "8612f540-1acb-4f13-a7f8-bd109adb6fe8",
                  "parentUUID": "1e56c2d9-56e4-4d1d-ac75-eac0a39f6943",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if length is not enough",
                  "fullTitle": "Message static getColumnSizesFromData() should work if length is not enough",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.getColumnSizesFromData([\n    ['now', 'Daily'],\n    ['13:00', 'Super Secret Meeting']\n]), [5, 16]);",
                  "err": {},
                  "uuid": "e4965b7a-08ba-414a-99e0-6247d0b3295b",
                  "parentUUID": "1e56c2d9-56e4-4d1d-ac75-eac0a39f6943",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if rows have different number of columns",
                  "fullTitle": "Message static getColumnSizesFromData() should throw error if rows have different number of columns",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(() => {\n    new Message().table([\n        ['now', 'Daily'],\n        ['13:00', 'Secret Meeting', '🟥']\n    ]);\n}, /Unable to render table: Row 1 has 3 entries, but first row has 2!/);",
                  "err": {},
                  "uuid": "34a6f79e-7841-46f0-9c17-83aee72e925d",
                  "parentUUID": "1e56c2d9-56e4-4d1d-ac75-eac0a39f6943",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e165b445-af1e-48a4-84ab-a21fdc3033ce",
                "19666557-cea6-4530-923f-bb2bb71378cc",
                "8612f540-1acb-4f13-a7f8-bd109adb6fe8",
                "e4965b7a-08ba-414a-99e0-6247d0b3295b",
                "34a6f79e-7841-46f0-9c17-83aee72e925d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b2da318e-57fa-4e8e-a1f8-afcab028907a",
              "title": "fill()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with default",
                  "fullTitle": "Message fill() should work with default",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World');\nmsg.fill();\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "95870f97-b4d2-4d89-8e93-27985ed2dfda",
                  "parentUUID": "b2da318e-57fa-4e8e-a1f8-afcab028907a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with single chars",
                  "fullTitle": "Message fill() should work with single chars",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "3cfd1922-0bf5-47f8-a206-f0994e073b4d",
                  "parentUUID": "b2da318e-57fa-4e8e-a1f8-afcab028907a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with multiple chars",
                  "fullTitle": "Message fill() should work with multiple chars",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥🟧🟨🟩🟦🟪');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# 🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩 #\\n' +\n    '# 🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧 #\\n' +\n    '# 🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪 #\\n' +\n    '# 🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩 #\\n' +\n    '# 🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧 #\\n' +\n    '# 🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪 #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "ae73e12b-ee32-4d14-b4c8-5026ca7ace83",
                  "parentUUID": "b2da318e-57fa-4e8e-a1f8-afcab028907a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95870f97-b4d2-4d89-8e93-27985ed2dfda",
                "3cfd1922-0bf5-47f8-a206-f0994e073b4d",
                "ae73e12b-ee32-4d14-b4c8-5026ca7ace83"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "149937a2-8e34-495f-a0a7-71e909c49512",
              "title": "write()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should start writing from top/left",
                  "fullTitle": "Message write() should start writing from top/left",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# H E L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "d954022a-7ce2-456c-9b7e-5974aa0211d6",
                  "parentUUID": "149937a2-8e34-495f-a0a7-71e909c49512",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept line & row for positioning",
                  "fullTitle": "Message write() should accept line & row for positioning",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World', {\n    position: {\n        line: 2,\n        row: 5\n    }\n});\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#           H E L L O   W O R L D              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "a98629e0-eb62-4cb8-8b68-e92501cc553d",
                  "parentUUID": "149937a2-8e34-495f-a0a7-71e909c49512",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add another line if text is too long",
                  "fullTitle": "Message write() should add another line if text is too long",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Lorem ipsum dolor sit amet, ' +\n    'consetetur sadipscing elitr, sed ' +\n    'diam nonumy eirmod tempor invidunt');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# L O R E M   I P S U M   D O L O R   S I T    #\\n' +\n    '# A M E T ,   C O N S E T E T U R              #\\n' +\n    '# S A D I P S C I N G   E L I T R ,   S E D    #\\n' +\n    '# D I A M   N O N U M Y   E I R M O D          #\\n' +\n    '# T E M P O R   I N V I D U N T                #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "abfadc48-1f08-4fb3-8dde-b84fbebd9abe",
                  "parentUUID": "149937a2-8e34-495f-a0a7-71e909c49512",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with words > board length",
                  "fullTitle": "Message write() should work with words > board length",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Lorem-ipsum-dolor-sit-amet');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# L O R E M - I P S U M - D O L O R - S I T -  #\\n' +\n    '# A M E T                                      #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "064c8dee-edc6-42e5-b606-05ea595bdd44",
                  "parentUUID": "149937a2-8e34-495f-a0a7-71e909c49512",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow to use NEXT_LINE flag",
                  "fullTitle": "Message write() should allow to use NEXT_LINE flag",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('13:00', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('Daily', { indent: true });\nmsg.write('', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('18:00', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('Fischstäbchen, Spinat & Ei', { indent: true });\nmsg.write('', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('20:00', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('Sandmännchen', { indent: true });\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# 1 3 : 0 0   D A I L Y                        #\\n' +\n    '#                                              #\\n' +\n    '# 1 8 : 0 0   F I S C H S T A E B C H E N ,    #\\n' +\n    '#             S P I N A T   &   E I            #\\n' +\n    '#                                              #\\n' +\n    '# 2 0 : 0 0   S A N D M A E N N C H E N        #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "559fe8ac-1c2a-424b-9663-7fb23c04724c",
                  "parentUUID": "149937a2-8e34-495f-a0a7-71e909c49512",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support the NO_SPACE_BETWEEN flag",
                  "fullTitle": "Message write() should support the NO_SPACE_BETWEEN flag",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Rindfleisch')\n    .write('etikettierungs', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('ueberwachungs', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('aufgaben', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('uebertragungs', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('gesetz', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('(das)');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# R I N D F L E I S C H                        #\\n' +\n    '# E T I K E T T I E R U N G S                  #\\n' +\n    '# U E B E R W A C H U N G S A U F G A B E N    #\\n' +\n    '# U E B E R T R A G U N G S G E S E T Z        #\\n' +\n    '# ( D A S )                                    #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "86367954-d96b-4733-9112-14329c678a12",
                  "parentUUID": "149937a2-8e34-495f-a0a7-71e909c49512",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support \\n",
                  "fullTitle": "Message write() should support \\n",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Message()\n    .write('Hello\\nWorld')\n    .toString(), '#==============================================#\\n' +\n    '# H E L L O                                    #\\n' +\n    '# W O R L D                                    #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');\nassert.strictEqual(new Message()\n    .write('H⍷llo World', { fallbackChar: 0 })\n    .toString(), '#==============================================#\\n' +\n    '# H   L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');\nassert.strictEqual(new Message()\n    .write('H⍷llo World', { fallbackChar: null })\n    .toString(), '#==============================================#\\n' +\n    '# H L L O   W O R L D                          #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "905616a3-bfa5-4391-91ee-081bc1644c99",
                  "parentUUID": "149937a2-8e34-495f-a0a7-71e909c49512",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle the fallback char",
                  "fullTitle": "Message write() should handle the fallback char",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Message()\n    .write('H⍷llo World')\n    .toString(), '#==============================================#\\n' +\n    '# H ? L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');\nassert.strictEqual(new Message()\n    .write('H⍷llo World', { fallbackChar: 0 })\n    .toString(), '#==============================================#\\n' +\n    '# H   L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');\nassert.strictEqual(new Message()\n    .write('H⍷llo World', { fallbackChar: null })\n    .toString(), '#==============================================#\\n' +\n    '# H L L O   W O R L D                          #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "fcc697c7-6997-41d6-b0ff-1ae6dc6e2c2f",
                  "parentUUID": "149937a2-8e34-495f-a0a7-71e909c49512",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove unsupported words by default",
                  "fullTitle": "Message write() should remove unsupported words by default",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('💪🏼 Gym');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# G Y M                                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "9b54ec27-5104-4697-82c3-4b9eb3beb6ee",
                  "parentUUID": "149937a2-8e34-495f-a0a7-71e909c49512",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not break if message is way too long",
                  "fullTitle": "Message write() should not break if message is way too long",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Lorem ipsum dolor sit amet, consectetur adipisici elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua.');\nmsg.write('Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat.');\nmsg.write('Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.');\nmsg.write('Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# L O R E M   I P S U M   D O L O R   S I T    #\\n' +\n    '# A M E T ,   C O N S E C T E T U R            #\\n' +\n    '# A D I P I S I C I   E L I T ,   S E D        #\\n' +\n    '# E I U S M O D   T E M P O R I N C I D U N T  #\\n' +\n    '# U T   L A B O R E   E T   D O L O R E        #\\n' +\n    '# M A G N A   A L I Q U A .   U T   E N I M    #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "afde1a77-b22f-4dc2-be73-a711bb6af4f5",
                  "parentUUID": "149937a2-8e34-495f-a0a7-71e909c49512",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d954022a-7ce2-456c-9b7e-5974aa0211d6",
                "a98629e0-eb62-4cb8-8b68-e92501cc553d",
                "abfadc48-1f08-4fb3-8dde-b84fbebd9abe",
                "064c8dee-edc6-42e5-b606-05ea595bdd44",
                "559fe8ac-1c2a-424b-9663-7fb23c04724c",
                "86367954-d96b-4733-9112-14329c678a12",
                "905616a3-bfa5-4391-91ee-081bc1644c99",
                "fcc697c7-6997-41d6-b0ff-1ae6dc6e2c2f",
                "9b54ec27-5104-4697-82c3-4b9eb3beb6ee",
                "afde1a77-b22f-4dc2-be73-a711bb6af4f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3d560398-6181-4942-b4ce-565fc0518ef1",
              "title": "table()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with a very basic example",
                  "fullTitle": "Message table() should work with a very basic example",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.table([\n    ['now', 'Daily'],\n    ['13:00', 'Secret Meeting']\n]);\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# N O W         D A I L Y                      #\\n' +\n    '#                                              #\\n' +\n    '# 1 3 : 0 0     S E C R E T   M E E T I N G    #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "f6721f18-4d08-48ef-a363-561c0d1cc48c",
                  "parentUUID": "3d560398-6181-4942-b4ce-565fc0518ef1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should just fill the space available if too full",
                  "fullTitle": "Message table() should just fill the space available if too full",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.table([\n    ['now', 'Daily'],\n    ['13:00', 'Super Secret Meeting'],\n    ['16:30', 'Awesome Presentation']\n]);\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# N O W       D A I L Y                        #\\n' +\n    '#                                              #\\n' +\n    '# 1 3 : 0 0   S U P E R   S E C R E T          #\\n' +\n    '#             M E E T I N G                    #\\n' +\n    '#                                              #\\n' +\n    '# 1 6 : 3 0   A W E S O M E   P R E S E N T -  #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "cf369474-362d-460f-8bfc-861585df6f1d",
                  "parentUUID": "3d560398-6181-4942-b4ce-565fc0518ef1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pay attention to the cursor",
                  "fullTitle": "Message table() should pay attention to the cursor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World\\n');\nmsg.table([\n    ['now', 'Daily'],\n    ['13:00', 'Secret Meeting']\n]);\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# H E L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '# N O W         D A I L Y                      #\\n' +\n    '#                                              #\\n' +\n    '# 1 3 : 0 0     S E C R E T   M E E T I N G    #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "d9f11a95-6b15-4ddf-97ca-69d05179c7b8",
                  "parentUUID": "3d560398-6181-4942-b4ce-565fc0518ef1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if rows have different number of columns",
                  "fullTitle": "Message table() should throw error if rows have different number of columns",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nassert.throws(() => {\n    msg.table([\n        ['now', 'Daily'],\n        ['13:00', 'Secret Meeting', '🟥']\n    ]);\n}, /Unable to render table: Row 1 has 3 entries, but first row has 2!/);",
                  "err": {},
                  "uuid": "5871cda1-67a4-4c0f-8e95-37e0135f6825",
                  "parentUUID": "3d560398-6181-4942-b4ce-565fc0518ef1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6721f18-4d08-48ef-a363-561c0d1cc48c",
                "cf369474-362d-460f-8bfc-861585df6f1d",
                "d9f11a95-6b15-4ddf-97ca-69d05179c7b8",
                "5871cda1-67a4-4c0f-8e95-37e0135f6825"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "622a8b69-2921-4286-8779-015608b5803c",
              "title": "center()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with a single word",
                  "fullTitle": "Message center() should work with a single word",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World');\nmsg.center();\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#           H E L L O   W O R L D              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "7c4496e9-a947-444b-acc5-0618d672b50a",
                  "parentUUID": "622a8b69-2921-4286-8779-015608b5803c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with a complete filled board",
                  "fullTitle": "Message center() should work with a complete filled board",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥');\nmsg.center();\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "c5cab62c-ba1d-45c2-ae74-2eb95e7d2bc4",
                  "parentUUID": "622a8b69-2921-4286-8779-015608b5803c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if word is not top/left aligned",
                  "fullTitle": "Message center() should also work if word is not top/left aligned",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World', {\n    position: {\n        line: 5,\n        row: 11\n    }\n});\nmsg.center();\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#           H E L L O   W O R L D              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "04274d48-c45f-48dd-b1da-0d15212d1dd7",
                  "parentUUID": "622a8b69-2921-4286-8779-015608b5803c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c4496e9-a947-444b-acc5-0618d672b50a",
                "c5cab62c-ba1d-45c2-ae74-2eb95e7d2bc4",
                "04274d48-c45f-48dd-b1da-0d15212d1dd7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "682a2dcd-5d08-4a6c-97fe-3a797bad4b04",
          "title": "MultipleBoard",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/multiple-boards.ts",
          "file": "/test/lib/multiple-boards.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4728739a-0cc4-4b0a-b5b0-eae27eb159e8",
              "title": "postMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/multiple-boards.ts",
              "file": "/test/lib/multiple-boards.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (live)",
                  "fullTitle": "MultipleBoard postMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "58468d0c-e655-4e80-9203-cd2fbb947441",
                  "parentUUID": "4728739a-0cc4-4b0a-b5b0-eae27eb159e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "58468d0c-e655-4e80-9203-cd2fbb947441"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "661033ee-b032-4a9c-aaa5-56e3ddaf12c9",
          "title": "ReadWriteAPI",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/read-write-api.ts",
          "file": "/test/lib/read-write-api.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "26fc7fcc-d951-4ede-9b26-f237d1e1180f",
              "title": "getCurrentMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/read-write-api.ts",
              "file": "/test/lib/read-write-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "ReadWriteAPI getCurrentMessage() should work (mocked)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const json = {\n        currentMessage: {\n            layout: JSON.stringify(msg.toCharArray())\n        }\n    };\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://rw.vestaboard.com/');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Vestaboard-Read-Write-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () { return json; })\n        };\n    });\n    const api = new ReadWriteAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', { fetch });\n    const result = yield api.getCurrentMessage();\n    assert.deepStrictEqual(result.toCharArray(), msg.toCharArray());\n});",
                  "err": {},
                  "uuid": "f62fd07c-ada2-4ce4-bd42-1ec2afd77b2c",
                  "parentUUID": "26fc7fcc-d951-4ede-9b26-f237d1e1180f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "ReadWriteAPI getCurrentMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "c011ef8a-69b5-4b33-a909-6cffaa125991",
                  "parentUUID": "26fc7fcc-d951-4ede-9b26-f237d1e1180f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f62fd07c-ada2-4ce4-bd42-1ec2afd77b2c"
              ],
              "failures": [],
              "pending": [
                "c011ef8a-69b5-4b33-a909-6cffaa125991"
              ],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "f4abf10f-d91d-4c99-bef3-e8335919a639",
              "title": "postMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/read-write-api.ts",
              "file": "/test/lib/read-write-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "ReadWriteAPI postMessage() should work (mocked)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://rw.vestaboard.com/');\n        assert.deepStrictEqual(options, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Vestaboard-Read-Write-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n            },\n            body: JSON.stringify(msg.toCharArray())\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () {\n                return ({\n                    status: 'ok'\n                });\n            })\n        };\n    });\n    const api = new ReadWriteAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', { fetch });\n    yield api.postMessage(msg);\n});",
                  "err": {},
                  "uuid": "01b0e465-5ed0-4816-9598-0fbf936b69a2",
                  "parentUUID": "f4abf10f-d91d-4c99-bef3-e8335919a639",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "ReadWriteAPI postMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "a5b2484d-3877-4e16-b778-85bda1c40571",
                  "parentUUID": "f4abf10f-d91d-4c99-bef3-e8335919a639",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01b0e465-5ed0-4816-9598-0fbf936b69a2"
              ],
              "failures": [],
              "pending": [
                "a5b2484d-3877-4e16-b778-85bda1c40571"
              ],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "48286476-1daa-4254-9bbf-67bb2e5f1620",
          "title": "SubscriptionAPI",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/subscription-api.ts",
          "file": "/test/lib/subscription-api.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1f28368e-590e-42fa-a264-3d98e754fedf",
              "title": "getViewer()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/subscription-api.ts",
              "file": "/test/lib/subscription-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "SubscriptionAPI getViewer() should work (mocked)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const json = {\n        type: 'installation',\n        _id: 'f35032ce-fd2b-4afb-8a24-d71c8085303c',\n        _created: '1577829607582',\n        installation: {\n            _id: '562038d1-6fdb-4ba5-ae8b-bc9ec882178d'\n        }\n    };\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://platform.vestaboard.com/viewer');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Vestaboard-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958',\n                'X-Vestaboard-Api-Secret': '******************************'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () { return json; })\n        };\n    });\n    const api = new SubscriptionAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', '******************************', { fetch });\n    const result = yield api.getViewer();\n    assert.deepStrictEqual(result, json);\n});",
                  "err": {},
                  "uuid": "be22d150-e2f3-449f-821c-b368e9983a39",
                  "parentUUID": "1f28368e-590e-42fa-a264-3d98e754fedf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "SubscriptionAPI getViewer() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "c2b5c0bf-2f05-4a6f-972e-e184c120a760",
                  "parentUUID": "1f28368e-590e-42fa-a264-3d98e754fedf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be22d150-e2f3-449f-821c-b368e9983a39"
              ],
              "failures": [],
              "pending": [
                "c2b5c0bf-2f05-4a6f-972e-e184c120a760"
              ],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "74339b19-1667-47a4-9ae3-e028c72edc08",
              "title": "getSubscription()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/subscription-api.ts",
              "file": "/test/lib/subscription-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "SubscriptionAPI getSubscription() should work (mocked)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const json = {\n        subscriptions: [\n            {\n                _id: 'bc6412b3-3aa6-4684-8962-cd2876942c0d',\n                _created: '1577833654294',\n                installation: {\n                    _id: 'fefb8778-9500-4522-b115-29c0dd13c402',\n                    installable: {\n                        _id: 'b629d7df-7ecb-4460-b51e-f87fa942f113'\n                    }\n                },\n                boards: [{\n                        _id: 'a1e866f2-e77e-45d8-997a-2e3ebeff4961'\n                    }]\n            }\n        ]\n    };\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://platform.vestaboard.com/subscriptions');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Vestaboard-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958',\n                'X-Vestaboard-Api-Secret': '******************************'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () { return json; })\n        };\n    });\n    const api = new SubscriptionAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', '******************************', { fetch });\n    const result = yield api.getSubscriptions();\n    assert.deepStrictEqual(result, json);\n});",
                  "err": {},
                  "uuid": "f475356b-4325-4c93-a279-c380818e5d47",
                  "parentUUID": "74339b19-1667-47a4-9ae3-e028c72edc08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "SubscriptionAPI getSubscription() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "662c4e03-c561-4d61-a041-35da9ae933c5",
                  "parentUUID": "74339b19-1667-47a4-9ae3-e028c72edc08",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f475356b-4325-4c93-a279-c380818e5d47"
              ],
              "failures": [],
              "pending": [
                "662c4e03-c561-4d61-a041-35da9ae933c5"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "eca4cd57-426b-4c95-8cb2-36125ad46e77",
              "title": "postMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/subscription-api.ts",
              "file": "/test/lib/subscription-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (single mode)",
                  "fullTitle": "SubscriptionAPI postMessage() should work (single mode)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://platform.vestaboard.com/subscriptions/foo/message');\n        assert.deepStrictEqual(options, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Vestaboard-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958',\n                'X-Vestaboard-Api-Secret': '******************************'\n            },\n            body: JSON.stringify({ characters: msg.toCharArray() })\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () {\n                return ({\n                    message: {\n                        id: '',\n                        created: 1\n                    }\n                });\n            })\n        };\n    });\n    const api = new SubscriptionAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', '******************************', { fetch });\n    const result = yield api.postMessage(msg, 'foo');\n    assert.deepStrictEqual(result, {\n        message: {\n            id: '',\n            created: 1\n        }\n    });\n});",
                  "err": {},
                  "uuid": "97cf3772-5251-4f99-aa42-58c911771802",
                  "parentUUID": "eca4cd57-426b-4c95-8cb2-36125ad46e77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (multi mode)",
                  "fullTitle": "SubscriptionAPI postMessage() should work (multi mode)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        const msg = new Message('Hello World');\n        assert.strictEqual(url, 'https://platform.vestaboard.com/subscriptions/foo/message');\n        assert.deepStrictEqual(options, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Vestaboard-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958',\n                'X-Vestaboard-Api-Secret': '******************************'\n            },\n            body: JSON.stringify({ characters: msg.toCharArray() })\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () {\n                return ({\n                    message: {\n                        id: '',\n                        created: 1\n                    }\n                });\n            })\n        };\n    });\n    const api = new SubscriptionAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', '******************************', { fetch });\n    const result = yield api.postMessage('Hello World', ['foo', 'foo']);\n    assert.deepStrictEqual(result, [\n        {\n            message: {\n                id: '',\n                created: 1\n            }\n        },\n        {\n            message: {\n                id: '',\n                created: 1\n            }\n        }\n    ]);\n});",
                  "err": {},
                  "uuid": "7cfe9261-796b-4d5f-8310-7b9190e24893",
                  "parentUUID": "eca4cd57-426b-4c95-8cb2-36125ad46e77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "SubscriptionAPI postMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "1907ba5e-78ec-4495-8258-f60c6a689026",
                  "parentUUID": "eca4cd57-426b-4c95-8cb2-36125ad46e77",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97cf3772-5251-4f99-aa42-58c911771802",
                "7cfe9261-796b-4d5f-8310-7b9190e24893"
              ],
              "failures": [],
              "pending": [
                "1907ba5e-78ec-4495-8258-f60c6a689026"
              ],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5fab9251-06cf-4347-9ae9-abc1139124d8",
          "title": "Tools",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/tools.ts",
          "file": "/test/lib/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cff12456-ea21-4bac-af4c-b1a7a62795e1",
              "title": "request",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/tools.ts",
              "file": "/test/lib/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work as intended",
                  "fullTitle": "Tools request should work as intended",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://example.com/test');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Test-Header': '1337'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () { return ({ foo: 'bar' }); })\n        };\n    });\n    const response = yield request('https://example.com/test', {\n        'X-Test-Header': '1337'\n    }, undefined, { fetch });\n    assert.deepStrictEqual(response, { foo: 'bar' });\n});",
                  "err": {},
                  "uuid": "e054db11-94d2-49c1-bed6-47f021765e5e",
                  "parentUUID": "cff12456-ea21-4bac-af4c-b1a7a62795e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on non 2xx status codes",
                  "fullTitle": "Tools request should throw error on non 2xx status codes",
                  "timedOut": false,
                  "duration": 10013,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://example.com/test');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Test-Header': '1337'\n            }\n        });\n        return {\n            ok: false,\n            status: 500,\n            statusText: 'ERROR',\n            json: () => __awaiter(this, void 0, void 0, function* () { return (''); })\n        };\n    });\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield request('https://example.com/test', {\n            'X-Test-Header': '1337'\n        }, undefined, { fetch });\n    }), /HTTP Request failed/);\n});",
                  "err": {},
                  "uuid": "036e25a9-b6ea-4856-aa90-ef3798ad7394",
                  "parentUUID": "cff12456-ea21-4bac-af4c-b1a7a62795e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e054db11-94d2-49c1-bed6-47f021765e5e",
                "036e25a9-b6ea-4856-aa90-ef3798ad7394"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10013,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}