{
  "stats": {
    "suites": 24,
    "tests": 58,
    "passes": 50,
    "pending": 8,
    "failures": 0,
    "start": "2022-11-13T16:38:43.426Z",
    "end": "2022-11-13T16:38:53.577Z",
    "duration": 10151,
    "testsRegistered": 58,
    "passPercent": 100,
    "pendingPercent": 13.793103448275861,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8ab9c08d-0abc-4ef0-9b20-30af37bc7a55",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b59e5667-0243-40fa-92e0-b1d64c46513c",
          "title": "LocalAPI",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/local-api.ts",
          "file": "/test/lib/local-api.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e5562b78-9f7b-4009-a5b4-f4c35102d5f4",
              "title": "getCurrentMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/local-api.ts",
              "file": "/test/lib/local-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked by device)",
                  "fullTitle": "LocalAPI getCurrentMessage() should work (mocked by device)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'http://vestaboard.local:7000/local-api/message');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Vestaboard-Local-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () {\n                return ({\n                    message: msg.toCharArray()\n                });\n            })\n        };\n    });\n    const api = new LocalAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', undefined, { fetch });\n    const result = yield api.getCurrentMessage();\n    assert.deepStrictEqual(result.toCharArray(), msg.toCharArray());\n});",
                  "err": {},
                  "uuid": "ebbf0a2b-2eb0-499a-b1a2-44cd5ab2d7e3",
                  "parentUUID": "e5562b78-9f7b-4009-a5b4-f4c35102d5f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (mocked by docs)",
                  "fullTitle": "LocalAPI getCurrentMessage() should work (mocked by docs)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'http://vestaboard.local:7000/local-api/message');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Vestaboard-Local-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () { return msg.toCharArray(); })\n        };\n    });\n    const api = new LocalAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', undefined, { fetch });\n    const result = yield api.getCurrentMessage();\n    assert.deepStrictEqual(result.toCharArray(), msg.toCharArray());\n});",
                  "err": {},
                  "uuid": "c66744a9-0ac8-47e5-b626-66254cef4e4c",
                  "parentUUID": "e5562b78-9f7b-4009-a5b4-f4c35102d5f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "LocalAPI getCurrentMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "a21e25ed-fbc2-41a6-9243-2cb43e160b9f",
                  "parentUUID": "e5562b78-9f7b-4009-a5b4-f4c35102d5f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ebbf0a2b-2eb0-499a-b1a2-44cd5ab2d7e3",
                "c66744a9-0ac8-47e5-b626-66254cef4e4c"
              ],
              "failures": [],
              "pending": [
                "a21e25ed-fbc2-41a6-9243-2cb43e160b9f"
              ],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "63f419f5-24ad-4a48-839f-5a666a25aadb",
              "title": "postMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/local-api.ts",
              "file": "/test/lib/local-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "LocalAPI postMessage() should work (mocked)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message('Hello World');\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'http://vestaboard.local:7000/local-api/message');\n        assert.deepStrictEqual(options, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Vestaboard-Local-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n            },\n            body: JSON.stringify(msg.toCharArray())\n        });\n        return {\n            ok: true,\n            status: 201,\n            statusText: 'CREATED',\n            json: () => __awaiter(this, void 0, void 0, function* () { return (''); })\n        };\n    });\n    const api = new LocalAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', undefined, { fetch });\n    yield api.postMessage('Hello World');\n});",
                  "err": {},
                  "uuid": "5b031774-f942-452d-bc7d-6f1d573a26f9",
                  "parentUUID": "63f419f5-24ad-4a48-839f-5a666a25aadb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "LocalAPI postMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "dc9bebb1-7107-4d6e-a178-5e2267e03c5f",
                  "parentUUID": "63f419f5-24ad-4a48-839f-5a666a25aadb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b031774-f942-452d-bc7d-6f1d573a26f9"
              ],
              "failures": [],
              "pending": [
                "dc9bebb1-7107-4d6e-a178-5e2267e03c5f"
              ],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "af27281a-7b56-4599-8f89-24261d66fe61",
          "title": "Message",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
          "file": "/test/lib/message.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5be65fa7-bb0f-47e7-b962-bfd12aba7aa8",
              "title": "constructor",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should center the message given",
                  "fullTitle": "Message constructor should center the message given",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Message('Hello World').toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#           H E L L O   W O R L D              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "02c7d42f-8e6b-4a6d-9eb7-3a1c55dd5a46",
                  "parentUUID": "5be65fa7-bb0f-47e7-b962-bfd12aba7aa8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also support a char array",
                  "fullTitle": "Message constructor should also support a char array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥🟧🟨🟩🟦🟪 ');\nassert.deepStrictEqual(new Message(msg.toCharArray()).toCharArray(), msg.toCharArray());",
                  "err": {},
                  "uuid": "f2788f3c-c939-4b04-9b55-045cc966658d",
                  "parentUUID": "5be65fa7-bb0f-47e7-b962-bfd12aba7aa8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02c7d42f-8e6b-4a6d-9eb7-3a1c55dd5a46",
                "f2788f3c-c939-4b04-9b55-045cc966658d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9e7ae92d-113e-484a-ad79-01048bc089f4",
              "title": "static string2chars()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message static string2chars() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('Hello'), [8, 5, 12, 12, 15]);",
                  "err": {},
                  "uuid": "40b7fb5f-8bd3-44d9-be21-644b7928dda7",
                  "parentUUID": "9e7ae92d-113e-484a-ad79-01048bc089f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle german umlauts",
                  "fullTitle": "Message static string2chars() should handle german umlauts",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('Käse'), [11, 1, 5, 19, 5]);",
                  "err": {},
                  "uuid": "d18223aa-0e36-4cde-83ea-41012b88a159",
                  "parentUUID": "9e7ae92d-113e-484a-ad79-01048bc089f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle color emojis",
                  "fullTitle": "Message static string2chars() should handle color emojis",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('🟥🟧🟨🟩🟦🟪⬜⬛'), [63, 64, 65, 66, 67, 68, 69, 0]);",
                  "err": {},
                  "uuid": "4d5515b2-3df8-4481-a1b3-3e35649c2c08",
                  "parentUUID": "9e7ae92d-113e-484a-ad79-01048bc089f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove special chars",
                  "fullTitle": "Message static string2chars() should remove special chars",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('H⍷llo', { fallbackChar: null }), [8, 12, 12, 15]);\nassert.deepStrictEqual(Message.string2chars('H⍷llo'), [8, 60, 12, 12, 15]);",
                  "err": {},
                  "uuid": "be952e48-0426-437b-a2ad-02f0ce2521f9",
                  "parentUUID": "9e7ae92d-113e-484a-ad79-01048bc089f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with all charts defined in CHAR_MAP",
                  "fullTitle": "Message static string2chars() should work with all charts defined in CHAR_MAP",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let text = '';\nconst result = [];\nCHAR_MAP.forEach(([str, chars]) => {\n    // assert.strictEqual(char.length, 1, `Char \"${char}\" has a length of ${char.length}`);\n    const actual = Message.string2chars(str, { removeUnsupportedWords: false });\n    const expected = chars.length !== 1 || chars[0] !== -2 ? chars : [0];\n    assert.deepStrictEqual(actual, expected, `Unable to process char \"${str}\": string2chars returned ${JSON.stringify(actual)}, but expected result was ${JSON.stringify(expected)}`);\n    text += str;\n    result.push(...expected);\n});\nassert.deepStrictEqual(Message.string2chars(text, { removeUnsupportedWords: false }), result);",
                  "err": {},
                  "uuid": "091a4479-067e-4289-ab11-e83c816279bc",
                  "parentUUID": "9e7ae92d-113e-484a-ad79-01048bc089f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40b7fb5f-8bd3-44d9-be21-644b7928dda7",
                "d18223aa-0e36-4cde-83ea-41012b88a159",
                "4d5515b2-3df8-4481-a1b3-3e35649c2c08",
                "be952e48-0426-437b-a2ad-02f0ce2521f9",
                "091a4479-067e-4289-ab11-e83c816279bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "08349e14-0fa1-4238-956b-ba406e393833",
              "title": "static splitCharsIntoLines()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should split words by whitespace",
                  "fullTitle": "Message static splitCharsIntoLines() should split words by whitespace",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const chars = Message.string2chars('Hello World');\nassert.deepEqual(Message.splitCharsIntoLines(chars, [22, 22]), [\n    [\n        8,\n        5,\n        12,\n        12,\n        15,\n        0,\n        23,\n        15,\n        18,\n        12,\n        4\n    ]\n]);\nassert.deepEqual(Message.splitCharsIntoLines(chars, [8, 8]), [\n    [\n        8,\n        5,\n        12,\n        12,\n        15\n    ],\n    [\n        23,\n        15,\n        18,\n        12,\n        4\n    ]\n]);",
                  "err": {},
                  "uuid": "776e841b-7eae-45f4-90f7-f0096b56eebc",
                  "parentUUID": "08349e14-0fa1-4238-956b-ba406e393833",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should split words by dash",
                  "fullTitle": "Message static splitCharsIntoLines() should split words by dash",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const chars = Message.string2chars('Hello-World');\nassert.deepEqual(Message.splitCharsIntoLines(chars, [22, 22]), [\n    [\n        8,\n        5,\n        12,\n        12,\n        15,\n        44,\n        23,\n        15,\n        18,\n        12,\n        4\n    ]\n]);\nassert.deepEqual(Message.splitCharsIntoLines(chars, [8, 8]), [\n    [\n        8,\n        5,\n        12,\n        12,\n        15,\n        44,\n    ],\n    [\n        23,\n        15,\n        18,\n        12,\n        4\n    ]\n]);",
                  "err": {},
                  "uuid": "e830cb12-85f2-4d20-8862-59bb93464c0d",
                  "parentUUID": "08349e14-0fa1-4238-956b-ba406e393833",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should auto-split very long words",
                  "fullTitle": "Message static splitCharsIntoLines() should auto-split very long words",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const chars = Message.string2chars('Rindfleischetikettierungsueberwachungsaufgabenuebertragungsgesetz');\nassert.deepEqual(Message.splitCharsIntoLines(chars, [22, 22]), [\n    [\n        18,\n        9,\n        14,\n        4,\n        6,\n        12,\n        5,\n        9,\n        19,\n        3,\n        8,\n        5,\n        20,\n        9,\n        11,\n        5,\n        20,\n        20,\n        9,\n        5,\n        18,\n        44\n    ],\n    [\n        21,\n        14,\n        7,\n        19,\n        21,\n        5,\n        2,\n        5,\n        18,\n        23,\n        1,\n        3,\n        8,\n        21,\n        14,\n        7,\n        19,\n        1,\n        21,\n        6,\n        7,\n        44\n    ],\n    [\n        1,\n        2,\n        5,\n        14,\n        21,\n        5,\n        2,\n        5,\n        18,\n        20,\n        18,\n        1,\n        7,\n        21,\n        14,\n        7,\n        19,\n        7,\n        5,\n        19,\n        5,\n        44,\n    ],\n    [\n        20,\n        26\n    ]\n]);",
                  "err": {},
                  "uuid": "f66c1a64-bb18-4994-90fd-ad7eac89b726",
                  "parentUUID": "08349e14-0fa1-4238-956b-ba406e393833",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "776e841b-7eae-45f4-90f7-f0096b56eebc",
                "e830cb12-85f2-4d20-8862-59bb93464c0d",
                "f66c1a64-bb18-4994-90fd-ad7eac89b726"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "742fcbfa-b8b8-47c9-9c04-8c66284bf16c",
              "title": "static removeEmojisFromChars()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not trim texts without emoji words",
                  "fullTitle": "Message static removeEmojisFromChars() should not trim texts without emoji words",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('Hello World'), [\n    8,\n    5,\n    12,\n    12,\n    15,\n    0,\n    23,\n    15,\n    18,\n    12,\n    4\n]);",
                  "err": {},
                  "uuid": "b800b817-076e-4143-9618-f16d6ed9260f",
                  "parentUUID": "742fcbfa-b8b8-47c9-9c04-8c66284bf16c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim emoji prefixes",
                  "fullTitle": "Message static removeEmojisFromChars() should trim emoji prefixes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('👋🏼Hello')), [8, 5, 12, 12, 15]);\nassert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('👋🏼 Hello')), [8, 5, 12, 12, 15]);",
                  "err": {},
                  "uuid": "836b711b-594e-4778-89fa-ec492462c9a7",
                  "parentUUID": "742fcbfa-b8b8-47c9-9c04-8c66284bf16c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim emoji postfixes",
                  "fullTitle": "Message static removeEmojisFromChars() should trim emoji postfixes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('Hello👋🏼')), [8, 5, 12, 12, 15]);\nassert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('Hello 👋🏼')), [8, 5, 12, 12, 15]);",
                  "err": {},
                  "uuid": "ff4f00e1-fc73-491a-86af-337b22cf8fb9",
                  "parentUUID": "742fcbfa-b8b8-47c9-9c04-8c66284bf16c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim emoji words",
                  "fullTitle": "Message static removeEmojisFromChars() should trim emoji words",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('Hello 👋🏼👋🏼 World')), [8, 5, 12, 12, 15, 0, 23, 15, 18, 12, 4]);",
                  "err": {},
                  "uuid": "8526bb24-58f3-4b3d-a254-13db1bfb7aff",
                  "parentUUID": "742fcbfa-b8b8-47c9-9c04-8c66284bf16c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b800b817-076e-4143-9618-f16d6ed9260f",
                "836b711b-594e-4778-89fa-ec492462c9a7",
                "ff4f00e1-fc73-491a-86af-337b22cf8fb9",
                "8526bb24-58f3-4b3d-a254-13db1bfb7aff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "30de7fed-e6c7-4e98-8823-658a80832cbb",
              "title": "static getColumnSizesFromData()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with a very basic example",
                  "fullTitle": "Message static getColumnSizesFromData() should work with a very basic example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.getColumnSizesFromData([\n    ['now', 'Daily'],\n    ['13:00', 'Secret Meeting']\n]), [6, 15]);",
                  "err": {},
                  "uuid": "90ad217c-5f0b-4b25-8ef8-044469699399",
                  "parentUUID": "30de7fed-e6c7-4e98-8823-658a80832cbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Message static getColumnSizesFromData() should work without data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.getColumnSizesFromData([]), []);",
                  "err": {},
                  "uuid": "ba9cf9fa-2308-4006-aaa2-dcd4b2ff8b10",
                  "parentUUID": "30de7fed-e6c7-4e98-8823-658a80832cbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with only one column",
                  "fullTitle": "Message static getColumnSizesFromData() should work with only one column",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.getColumnSizesFromData([\n    ['Daily'],\n    ['Secret Meeting']\n]), [22]);",
                  "err": {},
                  "uuid": "9d36e3c1-8b1e-4ca6-b2d5-7164dfea1031",
                  "parentUUID": "30de7fed-e6c7-4e98-8823-658a80832cbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if length is not enough",
                  "fullTitle": "Message static getColumnSizesFromData() should work if length is not enough",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.getColumnSizesFromData([\n    ['now', 'Daily'],\n    ['13:00', 'Super Secret Meeting']\n]), [5, 16]);",
                  "err": {},
                  "uuid": "e930c624-ca87-45b7-834f-2faa97241543",
                  "parentUUID": "30de7fed-e6c7-4e98-8823-658a80832cbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if rows have different number of columns",
                  "fullTitle": "Message static getColumnSizesFromData() should throw error if rows have different number of columns",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(() => {\n    new Message().table([\n        ['now', 'Daily'],\n        ['13:00', 'Secret Meeting', '🟥']\n    ]);\n}, /Unable to render table: Row 1 has 3 entries, but first row has 2!/);",
                  "err": {},
                  "uuid": "6b1cdc22-4381-471c-97ca-044c1346cca7",
                  "parentUUID": "30de7fed-e6c7-4e98-8823-658a80832cbb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90ad217c-5f0b-4b25-8ef8-044469699399",
                "ba9cf9fa-2308-4006-aaa2-dcd4b2ff8b10",
                "9d36e3c1-8b1e-4ca6-b2d5-7164dfea1031",
                "e930c624-ca87-45b7-834f-2faa97241543",
                "6b1cdc22-4381-471c-97ca-044c1346cca7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "84f12d66-f5b9-4db8-ab56-6288eecd60e9",
              "title": "fill()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with default",
                  "fullTitle": "Message fill() should work with default",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World');\nmsg.fill();\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "c8f6078e-8751-4bdc-b7c1-2315cd43e40c",
                  "parentUUID": "84f12d66-f5b9-4db8-ab56-6288eecd60e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with single chars",
                  "fullTitle": "Message fill() should work with single chars",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "a6926e72-1f0f-47fe-9113-a7aa945a48de",
                  "parentUUID": "84f12d66-f5b9-4db8-ab56-6288eecd60e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with multiple chars",
                  "fullTitle": "Message fill() should work with multiple chars",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥🟧🟨🟩🟦🟪');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# 🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩 #\\n' +\n    '# 🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧 #\\n' +\n    '# 🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪 #\\n' +\n    '# 🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩 #\\n' +\n    '# 🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧 #\\n' +\n    '# 🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪 #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "e7dec97b-da7e-40c7-a951-4d94147ccc5e",
                  "parentUUID": "84f12d66-f5b9-4db8-ab56-6288eecd60e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8f6078e-8751-4bdc-b7c1-2315cd43e40c",
                "a6926e72-1f0f-47fe-9113-a7aa945a48de",
                "e7dec97b-da7e-40c7-a951-4d94147ccc5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "687cb8ff-f8de-4e99-be32-04afb32a9ce2",
              "title": "write()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should start writing from top/left",
                  "fullTitle": "Message write() should start writing from top/left",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# H E L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "f5e5e2ad-1060-4c9b-8e3c-1d715ac20736",
                  "parentUUID": "687cb8ff-f8de-4e99-be32-04afb32a9ce2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept line & row for positioning",
                  "fullTitle": "Message write() should accept line & row for positioning",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World', {\n    position: {\n        line: 2,\n        row: 5\n    }\n});\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#           H E L L O   W O R L D              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "53431ef2-355d-4519-b24e-b37342cf2166",
                  "parentUUID": "687cb8ff-f8de-4e99-be32-04afb32a9ce2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add another line if text is too long",
                  "fullTitle": "Message write() should add another line if text is too long",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Lorem ipsum dolor sit amet, ' +\n    'consetetur sadipscing elitr, sed ' +\n    'diam nonumy eirmod tempor invidunt');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# L O R E M   I P S U M   D O L O R   S I T    #\\n' +\n    '# A M E T ,   C O N S E T E T U R              #\\n' +\n    '# S A D I P S C I N G   E L I T R ,   S E D    #\\n' +\n    '# D I A M   N O N U M Y   E I R M O D          #\\n' +\n    '# T E M P O R   I N V I D U N T                #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "8d3aa788-05f1-46c2-8c81-239bdc9e9a46",
                  "parentUUID": "687cb8ff-f8de-4e99-be32-04afb32a9ce2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with words > board length",
                  "fullTitle": "Message write() should work with words > board length",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Lorem-ipsum-dolor-sit-amet');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# L O R E M - I P S U M - D O L O R - S I T -  #\\n' +\n    '# A M E T                                      #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "20392f65-aba4-484f-a2b7-7e90ad1da6fb",
                  "parentUUID": "687cb8ff-f8de-4e99-be32-04afb32a9ce2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow to use NEXT_LINE flag",
                  "fullTitle": "Message write() should allow to use NEXT_LINE flag",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('13:00', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('Daily', { indent: true });\nmsg.write('', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('18:00', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('Fischstäbchen, Spinat & Ei', { indent: true });\nmsg.write('', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('20:00', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('Sandmännchen', { indent: true });\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# 1 3 : 0 0   D A I L Y                        #\\n' +\n    '#                                              #\\n' +\n    '# 1 8 : 0 0   F I S C H S T A E B C H E N ,    #\\n' +\n    '#             S P I N A T   &   E I            #\\n' +\n    '#                                              #\\n' +\n    '# 2 0 : 0 0   S A N D M A E N N C H E N        #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "8eaeaad5-15e7-427b-ba21-b14c2719ba1d",
                  "parentUUID": "687cb8ff-f8de-4e99-be32-04afb32a9ce2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support the NO_SPACE_BETWEEN flag",
                  "fullTitle": "Message write() should support the NO_SPACE_BETWEEN flag",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Rindfleisch')\n    .write('etikettierungs', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('ueberwachungs', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('aufgaben', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('uebertragungs', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('gesetz', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('(das)');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# R I N D F L E I S C H                        #\\n' +\n    '# E T I K E T T I E R U N G S                  #\\n' +\n    '# U E B E R W A C H U N G S A U F G A B E N    #\\n' +\n    '# U E B E R T R A G U N G S G E S E T Z        #\\n' +\n    '# ( D A S )                                    #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "eb8f9a02-9701-4ec6-87ca-59473d18ea5e",
                  "parentUUID": "687cb8ff-f8de-4e99-be32-04afb32a9ce2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support \\n",
                  "fullTitle": "Message write() should support \\n",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Message()\n    .write('Hello\\nWorld')\n    .toString(), '#==============================================#\\n' +\n    '# H E L L O                                    #\\n' +\n    '# W O R L D                                    #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');\nassert.strictEqual(new Message()\n    .write('H⍷llo World', { fallbackChar: 0 })\n    .toString(), '#==============================================#\\n' +\n    '# H   L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');\nassert.strictEqual(new Message()\n    .write('H⍷llo World', { fallbackChar: null })\n    .toString(), '#==============================================#\\n' +\n    '# H L L O   W O R L D                          #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "cf9f2b67-99a6-40dd-a8df-420ec8ca16d8",
                  "parentUUID": "687cb8ff-f8de-4e99-be32-04afb32a9ce2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle the fallback char",
                  "fullTitle": "Message write() should handle the fallback char",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Message()\n    .write('H⍷llo World')\n    .toString(), '#==============================================#\\n' +\n    '# H ? L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');\nassert.strictEqual(new Message()\n    .write('H⍷llo World', { fallbackChar: 0 })\n    .toString(), '#==============================================#\\n' +\n    '# H   L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');\nassert.strictEqual(new Message()\n    .write('H⍷llo World', { fallbackChar: null })\n    .toString(), '#==============================================#\\n' +\n    '# H L L O   W O R L D                          #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "34164a60-4b15-4c5f-aeb7-6aef3bf25198",
                  "parentUUID": "687cb8ff-f8de-4e99-be32-04afb32a9ce2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove unsupported words by default",
                  "fullTitle": "Message write() should remove unsupported words by default",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('💪🏼 Gym');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# G Y M                                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "205e7901-19a3-46c3-b5e0-a01e62c4e3c8",
                  "parentUUID": "687cb8ff-f8de-4e99-be32-04afb32a9ce2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not break if message is way too long",
                  "fullTitle": "Message write() should not break if message is way too long",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Lorem ipsum dolor sit amet, consectetur adipisici elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua.');\nmsg.write('Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat.');\nmsg.write('Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.');\nmsg.write('Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# L O R E M   I P S U M   D O L O R   S I T    #\\n' +\n    '# A M E T ,   C O N S E C T E T U R            #\\n' +\n    '# A D I P I S I C I   E L I T ,   S E D        #\\n' +\n    '# E I U S M O D   T E M P O R I N C I D U N T  #\\n' +\n    '# U T   L A B O R E   E T   D O L O R E        #\\n' +\n    '# M A G N A   A L I Q U A .   U T   E N I M    #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "3ef18d84-a111-4784-b5c2-9ec26839a718",
                  "parentUUID": "687cb8ff-f8de-4e99-be32-04afb32a9ce2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f5e5e2ad-1060-4c9b-8e3c-1d715ac20736",
                "53431ef2-355d-4519-b24e-b37342cf2166",
                "8d3aa788-05f1-46c2-8c81-239bdc9e9a46",
                "20392f65-aba4-484f-a2b7-7e90ad1da6fb",
                "8eaeaad5-15e7-427b-ba21-b14c2719ba1d",
                "eb8f9a02-9701-4ec6-87ca-59473d18ea5e",
                "cf9f2b67-99a6-40dd-a8df-420ec8ca16d8",
                "34164a60-4b15-4c5f-aeb7-6aef3bf25198",
                "205e7901-19a3-46c3-b5e0-a01e62c4e3c8",
                "3ef18d84-a111-4784-b5c2-9ec26839a718"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 34,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1cb0751d-684d-4aa5-9abc-01623d7fe5da",
              "title": "table()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with a very basic example",
                  "fullTitle": "Message table() should work with a very basic example",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.table([\n    ['now', 'Daily'],\n    ['13:00', 'Secret Meeting']\n]);\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# N O W         D A I L Y                      #\\n' +\n    '#                                              #\\n' +\n    '# 1 3 : 0 0     S E C R E T   M E E T I N G    #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "55092450-97a1-4040-9fd4-1d45815f11eb",
                  "parentUUID": "1cb0751d-684d-4aa5-9abc-01623d7fe5da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should just fill the space available if too full",
                  "fullTitle": "Message table() should just fill the space available if too full",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.table([\n    ['now', 'Daily'],\n    ['13:00', 'Super Secret Meeting'],\n    ['16:30', 'Awesome Presentation']\n]);\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# N O W       D A I L Y                        #\\n' +\n    '#                                              #\\n' +\n    '# 1 3 : 0 0   S U P E R   S E C R E T          #\\n' +\n    '#             M E E T I N G                    #\\n' +\n    '#                                              #\\n' +\n    '# 1 6 : 3 0   A W E S O M E   P R E S E N T -  #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "987d1d8c-460b-4e89-b16a-c4561855bbc6",
                  "parentUUID": "1cb0751d-684d-4aa5-9abc-01623d7fe5da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pay attention to the cursor",
                  "fullTitle": "Message table() should pay attention to the cursor",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World\\n');\nmsg.table([\n    ['now', 'Daily'],\n    ['13:00', 'Secret Meeting']\n]);\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# H E L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '# N O W         D A I L Y                      #\\n' +\n    '#                                              #\\n' +\n    '# 1 3 : 0 0     S E C R E T   M E E T I N G    #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "cfa82952-accf-44ff-9a9a-122c92779647",
                  "parentUUID": "1cb0751d-684d-4aa5-9abc-01623d7fe5da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if rows have different number of columns",
                  "fullTitle": "Message table() should throw error if rows have different number of columns",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nassert.throws(() => {\n    msg.table([\n        ['now', 'Daily'],\n        ['13:00', 'Secret Meeting', '🟥']\n    ]);\n}, /Unable to render table: Row 1 has 3 entries, but first row has 2!/);",
                  "err": {},
                  "uuid": "20cf8e5b-cf62-4dd8-bce6-573a453d62c6",
                  "parentUUID": "1cb0751d-684d-4aa5-9abc-01623d7fe5da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55092450-97a1-4040-9fd4-1d45815f11eb",
                "987d1d8c-460b-4e89-b16a-c4561855bbc6",
                "cfa82952-accf-44ff-9a9a-122c92779647",
                "20cf8e5b-cf62-4dd8-bce6-573a453d62c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "454a2079-55f4-44c6-b42d-c78201b6eb38",
              "title": "center()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with a single word",
                  "fullTitle": "Message center() should work with a single word",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World');\nmsg.center();\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#           H E L L O   W O R L D              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "7e08f8cb-f5a4-4197-9ef1-c08db2ee6b38",
                  "parentUUID": "454a2079-55f4-44c6-b42d-c78201b6eb38",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with a complete filled board",
                  "fullTitle": "Message center() should work with a complete filled board",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥');\nmsg.center();\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "19262947-3dda-4a85-b1fe-2c7f4ec7cacb",
                  "parentUUID": "454a2079-55f4-44c6-b42d-c78201b6eb38",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if word is not top/left aligned",
                  "fullTitle": "Message center() should also work if word is not top/left aligned",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World', {\n    position: {\n        line: 5,\n        row: 11\n    }\n});\nmsg.center();\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#           H E L L O   W O R L D              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "ca762c2f-6f5a-4c04-a6e5-b08afde82523",
                  "parentUUID": "454a2079-55f4-44c6-b42d-c78201b6eb38",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e08f8cb-f5a4-4197-9ef1-c08db2ee6b38",
                "19262947-3dda-4a85-b1fe-2c7f4ec7cacb",
                "ca762c2f-6f5a-4c04-a6e5-b08afde82523"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "70040d6e-b47f-4e70-8f72-3a9f2a32f5c2",
          "title": "MultipleBoard",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/multiple-boards.ts",
          "file": "/test/lib/multiple-boards.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "98e97fee-e1e3-469b-a497-68ad647bb165",
              "title": "postMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/multiple-boards.ts",
              "file": "/test/lib/multiple-boards.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (live)",
                  "fullTitle": "MultipleBoard postMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "2ed5d21d-b9ff-4766-af45-8ac445ccf0ae",
                  "parentUUID": "98e97fee-e1e3-469b-a497-68ad647bb165",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "2ed5d21d-b9ff-4766-af45-8ac445ccf0ae"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "06910a8a-9fee-4a9f-8d59-7842e2d2eabc",
          "title": "ReadWriteAPI",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/read-write-api.ts",
          "file": "/test/lib/read-write-api.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "abb3d542-88f1-4bcf-9283-48bf47afb897",
              "title": "getCurrentMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/read-write-api.ts",
              "file": "/test/lib/read-write-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "ReadWriteAPI getCurrentMessage() should work (mocked)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const json = {\n        currentMessage: {\n            layout: JSON.stringify(msg.toCharArray())\n        }\n    };\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://rw.vestaboard.com/');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Vestaboard-Read-Write-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () { return json; })\n        };\n    });\n    const api = new ReadWriteAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', { fetch });\n    const result = yield api.getCurrentMessage();\n    assert.deepStrictEqual(result.toCharArray(), msg.toCharArray());\n});",
                  "err": {},
                  "uuid": "aa9a0a9e-58da-4c6d-b1bd-fdbfc4a71352",
                  "parentUUID": "abb3d542-88f1-4bcf-9283-48bf47afb897",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "ReadWriteAPI getCurrentMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "70df24bc-653a-4071-addd-bee7a9bff704",
                  "parentUUID": "abb3d542-88f1-4bcf-9283-48bf47afb897",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa9a0a9e-58da-4c6d-b1bd-fdbfc4a71352"
              ],
              "failures": [],
              "pending": [
                "70df24bc-653a-4071-addd-bee7a9bff704"
              ],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "2803ef14-693f-49f2-ab35-d2664a4e762c",
              "title": "postMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/read-write-api.ts",
              "file": "/test/lib/read-write-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "ReadWriteAPI postMessage() should work (mocked)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://rw.vestaboard.com/');\n        assert.deepStrictEqual(options, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Vestaboard-Read-Write-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n            },\n            body: JSON.stringify(msg.toCharArray())\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () {\n                return ({\n                    status: 'ok'\n                });\n            })\n        };\n    });\n    const api = new ReadWriteAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', { fetch });\n    yield api.postMessage(msg);\n});",
                  "err": {},
                  "uuid": "82f9d2c3-d704-4f4d-90ee-1b6022381e59",
                  "parentUUID": "2803ef14-693f-49f2-ab35-d2664a4e762c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "ReadWriteAPI postMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "27b3ba90-e5e8-44c1-ae74-34b062300bfd",
                  "parentUUID": "2803ef14-693f-49f2-ab35-d2664a4e762c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82f9d2c3-d704-4f4d-90ee-1b6022381e59"
              ],
              "failures": [],
              "pending": [
                "27b3ba90-e5e8-44c1-ae74-34b062300bfd"
              ],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d77dc582-2a46-4fda-b7ec-1076c0ca60bc",
          "title": "SubscriptionAPI",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/subscription-api.ts",
          "file": "/test/lib/subscription-api.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ebd98329-b787-46a9-8582-8947605a5dfe",
              "title": "getViewer()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/subscription-api.ts",
              "file": "/test/lib/subscription-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "SubscriptionAPI getViewer() should work (mocked)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const json = {\n        type: 'installation',\n        _id: 'f35032ce-fd2b-4afb-8a24-d71c8085303c',\n        _created: '1577829607582',\n        installation: {\n            _id: '562038d1-6fdb-4ba5-ae8b-bc9ec882178d'\n        }\n    };\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://platform.vestaboard.com/viewer');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Vestaboard-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958',\n                'X-Vestaboard-Api-Secret': '******************************'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () { return json; })\n        };\n    });\n    const api = new SubscriptionAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', '******************************', { fetch });\n    const result = yield api.getViewer();\n    assert.deepStrictEqual(result, json);\n});",
                  "err": {},
                  "uuid": "fd0cd39f-0be1-4bce-9a67-b966b7e2c87a",
                  "parentUUID": "ebd98329-b787-46a9-8582-8947605a5dfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "SubscriptionAPI getViewer() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "41938ec8-8584-4434-b6eb-d7c7072036ff",
                  "parentUUID": "ebd98329-b787-46a9-8582-8947605a5dfe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd0cd39f-0be1-4bce-9a67-b966b7e2c87a"
              ],
              "failures": [],
              "pending": [
                "41938ec8-8584-4434-b6eb-d7c7072036ff"
              ],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "d52cb243-57ff-46a6-8158-c09d765f934a",
              "title": "getSubscription()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/subscription-api.ts",
              "file": "/test/lib/subscription-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "SubscriptionAPI getSubscription() should work (mocked)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const json = {\n        subscriptions: [\n            {\n                _id: 'bc6412b3-3aa6-4684-8962-cd2876942c0d',\n                _created: '1577833654294',\n                installation: {\n                    _id: 'fefb8778-9500-4522-b115-29c0dd13c402',\n                    installable: {\n                        _id: 'b629d7df-7ecb-4460-b51e-f87fa942f113'\n                    }\n                },\n                boards: [{\n                        _id: 'a1e866f2-e77e-45d8-997a-2e3ebeff4961'\n                    }]\n            }\n        ]\n    };\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://platform.vestaboard.com/subscriptions');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Vestaboard-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958',\n                'X-Vestaboard-Api-Secret': '******************************'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () { return json; })\n        };\n    });\n    const api = new SubscriptionAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', '******************************', { fetch });\n    const result = yield api.getSubscriptions();\n    assert.deepStrictEqual(result, json);\n});",
                  "err": {},
                  "uuid": "7ec20ddf-d026-489d-9bd8-3b4af4a6b7bb",
                  "parentUUID": "d52cb243-57ff-46a6-8158-c09d765f934a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "SubscriptionAPI getSubscription() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3c7d9b81-6450-4645-88f0-aff10ba3a992",
                  "parentUUID": "d52cb243-57ff-46a6-8158-c09d765f934a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ec20ddf-d026-489d-9bd8-3b4af4a6b7bb"
              ],
              "failures": [],
              "pending": [
                "3c7d9b81-6450-4645-88f0-aff10ba3a992"
              ],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "9bf0e9b6-6264-42d3-892c-06fc5c08a5d3",
              "title": "postMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/subscription-api.ts",
              "file": "/test/lib/subscription-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (single mode)",
                  "fullTitle": "SubscriptionAPI postMessage() should work (single mode)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const msg = new Message();\n    msg.fill('🟥🟧🟨🟩🟦🟪');\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://platform.vestaboard.com/subscriptions/foo/message');\n        assert.deepStrictEqual(options, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Vestaboard-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958',\n                'X-Vestaboard-Api-Secret': '******************************'\n            },\n            body: JSON.stringify({ characters: msg.toCharArray() })\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () {\n                return ({\n                    message: {\n                        id: '',\n                        created: 1\n                    }\n                });\n            })\n        };\n    });\n    const api = new SubscriptionAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', '******************************', { fetch });\n    const result = yield api.postMessage(msg, 'foo');\n    assert.deepStrictEqual(result, {\n        message: {\n            id: '',\n            created: 1\n        }\n    });\n});",
                  "err": {},
                  "uuid": "bfc1ef1b-c8af-405a-bd44-8131384f9238",
                  "parentUUID": "9bf0e9b6-6264-42d3-892c-06fc5c08a5d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (multi mode)",
                  "fullTitle": "SubscriptionAPI postMessage() should work (multi mode)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        const msg = new Message('Hello World');\n        assert.strictEqual(url, 'https://platform.vestaboard.com/subscriptions/foo/message');\n        assert.deepStrictEqual(options, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Vestaboard-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958',\n                'X-Vestaboard-Api-Secret': '******************************'\n            },\n            body: JSON.stringify({ characters: msg.toCharArray() })\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () {\n                return ({\n                    message: {\n                        id: '',\n                        created: 1\n                    }\n                });\n            })\n        };\n    });\n    const api = new SubscriptionAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', '******************************', { fetch });\n    const result = yield api.postMessage('Hello World', ['foo', 'foo']);\n    assert.deepStrictEqual(result, [\n        {\n            message: {\n                id: '',\n                created: 1\n            }\n        },\n        {\n            message: {\n                id: '',\n                created: 1\n            }\n        }\n    ]);\n});",
                  "err": {},
                  "uuid": "ab59728b-784d-4637-8c80-adb776736f06",
                  "parentUUID": "9bf0e9b6-6264-42d3-892c-06fc5c08a5d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "SubscriptionAPI postMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3f9328fd-d911-4b13-9db2-39f31bb89625",
                  "parentUUID": "9bf0e9b6-6264-42d3-892c-06fc5c08a5d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bfc1ef1b-c8af-405a-bd44-8131384f9238",
                "ab59728b-784d-4637-8c80-adb776736f06"
              ],
              "failures": [],
              "pending": [
                "3f9328fd-d911-4b13-9db2-39f31bb89625"
              ],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "97601309-cb65-4237-99ca-dc0cb6b23a52",
          "title": "Tools",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/tools.ts",
          "file": "/test/lib/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b4391db6-6897-4c0b-8cd4-006ec0a0a19d",
              "title": "request",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/tools.ts",
              "file": "/test/lib/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work as intended",
                  "fullTitle": "Tools request should work as intended",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://example.com/test');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Test-Header': '1337'\n            }\n        });\n        return {\n            ok: true,\n            status: 200,\n            statusText: 'OK',\n            json: () => __awaiter(this, void 0, void 0, function* () { return ({ foo: 'bar' }); })\n        };\n    });\n    const response = yield request('https://example.com/test', {\n        'X-Test-Header': '1337'\n    }, undefined, { fetch });\n    assert.deepStrictEqual(response, { foo: 'bar' });\n});",
                  "err": {},
                  "uuid": "7436c1ad-2367-45c0-9334-c4934cbe0263",
                  "parentUUID": "b4391db6-6897-4c0b-8cd4-006ec0a0a19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on non 2xx status codes",
                  "fullTitle": "Tools request should throw error on non 2xx status codes",
                  "timedOut": false,
                  "duration": 10014,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const fetch = (url, options) => __awaiter(this, void 0, void 0, function* () {\n        assert.strictEqual(url, 'https://example.com/test');\n        assert.deepStrictEqual(options, {\n            method: 'GET',\n            headers: {\n                'X-Test-Header': '1337'\n            }\n        });\n        return {\n            ok: false,\n            status: 500,\n            statusText: 'ERROR',\n            json: () => __awaiter(this, void 0, void 0, function* () { return (''); })\n        };\n    });\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield request('https://example.com/test', {\n            'X-Test-Header': '1337'\n        }, undefined, { fetch });\n    }), /HTTP Request failed/);\n});",
                  "err": {},
                  "uuid": "f28b1d11-c770-48c4-86ff-fc68b87fae45",
                  "parentUUID": "b4391db6-6897-4c0b-8cd4-006ec0a0a19d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7436c1ad-2367-45c0-9334-c4934cbe0263",
                "f28b1d11-c770-48c4-86ff-fc68b87fae45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10015,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}