{
  "stats": {
    "suites": 24,
    "tests": 58,
    "passes": 50,
    "pending": 8,
    "failures": 0,
    "start": "2024-08-20T12:55:41.651Z",
    "end": "2024-08-20T12:55:51.733Z",
    "duration": 10082,
    "testsRegistered": 58,
    "passPercent": 100,
    "pendingPercent": 13.793103448275861,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6a14f23d-5fcf-47a3-8c96-bd9cf9652041",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6e7c0080-77eb-4697-a23a-2e9c20878b7e",
          "title": "LocalAPI",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/local-api.ts",
          "file": "/test/lib/local-api.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d754c43b-1b72-4923-beed-7b9359d89be8",
              "title": "getCurrentMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/local-api.ts",
              "file": "/test/lib/local-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked by device)",
                  "fullTitle": "LocalAPI getCurrentMessage() should work (mocked by device)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥🟧🟨🟩🟦🟪');\nconst fetch = async (url, options) => {\n    assert.strictEqual(url, 'http://vestaboard.local:7000/local-api/message');\n    assert.deepStrictEqual(options, {\n        method: 'GET',\n        headers: {\n            'X-Vestaboard-Local-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n        }\n    });\n    return {\n        ok: true,\n        status: 200,\n        statusText: 'OK',\n        json: async () => ({\n            message: msg.toCharArray()\n        })\n    };\n};\nconst api = new LocalAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', undefined, { fetch });\nconst result = await api.getCurrentMessage();\nassert.deepStrictEqual(result.toCharArray(), msg.toCharArray());",
                  "err": {},
                  "uuid": "89caf451-c116-47e8-8cb5-ac67a027bba2",
                  "parentUUID": "d754c43b-1b72-4923-beed-7b9359d89be8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (mocked by docs)",
                  "fullTitle": "LocalAPI getCurrentMessage() should work (mocked by docs)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥🟧🟨🟩🟦🟪');\nconst fetch = async (url, options) => {\n    assert.strictEqual(url, 'http://vestaboard.local:7000/local-api/message');\n    assert.deepStrictEqual(options, {\n        method: 'GET',\n        headers: {\n            'X-Vestaboard-Local-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n        }\n    });\n    return {\n        ok: true,\n        status: 200,\n        statusText: 'OK',\n        json: async () => msg.toCharArray()\n    };\n};\nconst api = new LocalAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', undefined, { fetch });\nconst result = await api.getCurrentMessage();\nassert.deepStrictEqual(result.toCharArray(), msg.toCharArray());",
                  "err": {},
                  "uuid": "2424883e-e238-4a64-8aa7-18322857e56f",
                  "parentUUID": "d754c43b-1b72-4923-beed-7b9359d89be8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "LocalAPI getCurrentMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "70b1cd34-1772-4aff-96b1-08bbe9506135",
                  "parentUUID": "d754c43b-1b72-4923-beed-7b9359d89be8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89caf451-c116-47e8-8cb5-ac67a027bba2",
                "2424883e-e238-4a64-8aa7-18322857e56f"
              ],
              "failures": [],
              "pending": [
                "70b1cd34-1772-4aff-96b1-08bbe9506135"
              ],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "ae747e6d-24c3-4f64-86c4-865ff14e8f0a",
              "title": "postMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/local-api.ts",
              "file": "/test/lib/local-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "LocalAPI postMessage() should work (mocked)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message('Hello World');\nconst fetch = async (url, options) => {\n    assert.strictEqual(url, 'http://vestaboard.local:7000/local-api/message');\n    assert.deepStrictEqual(options, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-Vestaboard-Local-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n        },\n        body: JSON.stringify(msg.toCharArray())\n    });\n    return {\n        ok: true,\n        status: 201,\n        statusText: 'CREATED',\n        json: async () => ('')\n    };\n};\nconst api = new LocalAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', undefined, { fetch });\nawait api.postMessage('Hello World');",
                  "err": {},
                  "uuid": "49faa50f-306e-4b79-83fe-d9c6d68a45f2",
                  "parentUUID": "ae747e6d-24c3-4f64-86c4-865ff14e8f0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "LocalAPI postMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "6bf8d839-575b-4e92-8810-0d89d0837edf",
                  "parentUUID": "ae747e6d-24c3-4f64-86c4-865ff14e8f0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49faa50f-306e-4b79-83fe-d9c6d68a45f2"
              ],
              "failures": [],
              "pending": [
                "6bf8d839-575b-4e92-8810-0d89d0837edf"
              ],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "817a1e73-fcfe-441e-a2a6-6e18372a4f9d",
          "title": "Message",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
          "file": "/test/lib/message.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4212d176-45f8-4b40-820c-c77e70fd1740",
              "title": "constructor",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should center the message given",
                  "fullTitle": "Message constructor should center the message given",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Message('Hello World').toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#           H E L L O   W O R L D              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "99eec28f-6b63-40e0-b29d-15d6980eb739",
                  "parentUUID": "4212d176-45f8-4b40-820c-c77e70fd1740",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also support a char array",
                  "fullTitle": "Message constructor should also support a char array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥🟧🟨🟩🟦🟪 ');\nassert.deepStrictEqual(new Message(msg.toCharArray()).toCharArray(), msg.toCharArray());",
                  "err": {},
                  "uuid": "bb8892b7-baf9-4506-82cb-e5ed27397dd5",
                  "parentUUID": "4212d176-45f8-4b40-820c-c77e70fd1740",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99eec28f-6b63-40e0-b29d-15d6980eb739",
                "bb8892b7-baf9-4506-82cb-e5ed27397dd5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "50681898-a1b4-4cfd-b44f-b059c2546c31",
              "title": "static string2chars()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "Message static string2chars() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('Hello'), [8, 5, 12, 12, 15]);",
                  "err": {},
                  "uuid": "15bfc18c-bf71-4bf2-8a71-91d101f811e0",
                  "parentUUID": "50681898-a1b4-4cfd-b44f-b059c2546c31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle german umlauts",
                  "fullTitle": "Message static string2chars() should handle german umlauts",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('Käse'), [11, 1, 5, 19, 5]);",
                  "err": {},
                  "uuid": "7741f501-d1d3-4c4a-a570-f3141acdcdc5",
                  "parentUUID": "50681898-a1b4-4cfd-b44f-b059c2546c31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle color emojis",
                  "fullTitle": "Message static string2chars() should handle color emojis",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('🟥🟧🟨🟩🟦🟪⬜⬛'), [63, 64, 65, 66, 67, 68, 69, 0]);",
                  "err": {},
                  "uuid": "a1ffe0ce-f79f-4104-b8ba-95b1b0d939d6",
                  "parentUUID": "50681898-a1b4-4cfd-b44f-b059c2546c31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove special chars",
                  "fullTitle": "Message static string2chars() should remove special chars",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('H⍷llo', { fallbackChar: null }), [8, 12, 12, 15]);\nassert.deepStrictEqual(Message.string2chars('H⍷llo'), [8, 60, 12, 12, 15]);",
                  "err": {},
                  "uuid": "84f3adff-9c6d-4ab0-aa23-f5fb0a32dfa6",
                  "parentUUID": "50681898-a1b4-4cfd-b44f-b059c2546c31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with all charts defined in CHAR_MAP",
                  "fullTitle": "Message static string2chars() should work with all charts defined in CHAR_MAP",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let text = '';\nconst result = [];\nCHAR_MAP.forEach(([str, chars]) => {\n    // assert.strictEqual(char.length, 1, `Char \"${char}\" has a length of ${char.length}`);\n    const actual = Message.string2chars(str, { removeUnsupportedWords: false });\n    const expected = chars.length !== 1 || chars[0] !== -2 ? chars : [0];\n    assert.deepStrictEqual(actual, expected, `Unable to process char \"${str}\": string2chars returned ${JSON.stringify(actual)}, but expected result was ${JSON.stringify(expected)}`);\n    text += str;\n    result.push(...expected);\n});\nassert.deepStrictEqual(Message.string2chars(text, { removeUnsupportedWords: false }), result);",
                  "err": {},
                  "uuid": "9e66492a-ae02-408d-95ad-db68dbd15d46",
                  "parentUUID": "50681898-a1b4-4cfd-b44f-b059c2546c31",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "15bfc18c-bf71-4bf2-8a71-91d101f811e0",
                "7741f501-d1d3-4c4a-a570-f3141acdcdc5",
                "a1ffe0ce-f79f-4104-b8ba-95b1b0d939d6",
                "84f3adff-9c6d-4ab0-aa23-f5fb0a32dfa6",
                "9e66492a-ae02-408d-95ad-db68dbd15d46"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3f0b7e67-eaad-4b6d-9b33-fee6a84737a3",
              "title": "static splitCharsIntoLines()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should split words by whitespace",
                  "fullTitle": "Message static splitCharsIntoLines() should split words by whitespace",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const chars = Message.string2chars('Hello World');\nassert.deepEqual(Message.splitCharsIntoLines(chars, [22, 22]), [\n    [\n        8,\n        5,\n        12,\n        12,\n        15,\n        0,\n        23,\n        15,\n        18,\n        12,\n        4\n    ]\n]);\nassert.deepEqual(Message.splitCharsIntoLines(chars, [8, 8]), [\n    [\n        8,\n        5,\n        12,\n        12,\n        15\n    ],\n    [\n        23,\n        15,\n        18,\n        12,\n        4\n    ]\n]);",
                  "err": {},
                  "uuid": "c0b8e6e3-de17-4f49-b519-2765e8612f01",
                  "parentUUID": "3f0b7e67-eaad-4b6d-9b33-fee6a84737a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should split words by dash",
                  "fullTitle": "Message static splitCharsIntoLines() should split words by dash",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const chars = Message.string2chars('Hello-World');\nassert.deepEqual(Message.splitCharsIntoLines(chars, [22, 22]), [\n    [\n        8,\n        5,\n        12,\n        12,\n        15,\n        44,\n        23,\n        15,\n        18,\n        12,\n        4\n    ]\n]);\nassert.deepEqual(Message.splitCharsIntoLines(chars, [8, 8]), [\n    [\n        8,\n        5,\n        12,\n        12,\n        15,\n        44,\n    ],\n    [\n        23,\n        15,\n        18,\n        12,\n        4\n    ]\n]);",
                  "err": {},
                  "uuid": "5a7e8d4c-f0a6-4bcb-9364-5366579ef96f",
                  "parentUUID": "3f0b7e67-eaad-4b6d-9b33-fee6a84737a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should auto-split very long words",
                  "fullTitle": "Message static splitCharsIntoLines() should auto-split very long words",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const chars = Message.string2chars('Rindfleischetikettierungsueberwachungsaufgabenuebertragungsgesetz');\nassert.deepEqual(Message.splitCharsIntoLines(chars, [22, 22]), [\n    [\n        18,\n        9,\n        14,\n        4,\n        6,\n        12,\n        5,\n        9,\n        19,\n        3,\n        8,\n        5,\n        20,\n        9,\n        11,\n        5,\n        20,\n        20,\n        9,\n        5,\n        18,\n        44\n    ],\n    [\n        21,\n        14,\n        7,\n        19,\n        21,\n        5,\n        2,\n        5,\n        18,\n        23,\n        1,\n        3,\n        8,\n        21,\n        14,\n        7,\n        19,\n        1,\n        21,\n        6,\n        7,\n        44\n    ],\n    [\n        1,\n        2,\n        5,\n        14,\n        21,\n        5,\n        2,\n        5,\n        18,\n        20,\n        18,\n        1,\n        7,\n        21,\n        14,\n        7,\n        19,\n        7,\n        5,\n        19,\n        5,\n        44,\n    ],\n    [\n        20,\n        26\n    ]\n]);",
                  "err": {},
                  "uuid": "13f3f1d9-d842-4c8c-872f-a828c69be3cc",
                  "parentUUID": "3f0b7e67-eaad-4b6d-9b33-fee6a84737a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0b8e6e3-de17-4f49-b519-2765e8612f01",
                "5a7e8d4c-f0a6-4bcb-9364-5366579ef96f",
                "13f3f1d9-d842-4c8c-872f-a828c69be3cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f7a6fddf-b130-43b7-bfc1-1e8524734a7a",
              "title": "static removeEmojisFromChars()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not trim texts without emoji words",
                  "fullTitle": "Message static removeEmojisFromChars() should not trim texts without emoji words",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.string2chars('Hello World'), [\n    8,\n    5,\n    12,\n    12,\n    15,\n    0,\n    23,\n    15,\n    18,\n    12,\n    4\n]);",
                  "err": {},
                  "uuid": "5e7f4052-8584-4e23-a967-06500a102d97",
                  "parentUUID": "f7a6fddf-b130-43b7-bfc1-1e8524734a7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim emoji prefixes",
                  "fullTitle": "Message static removeEmojisFromChars() should trim emoji prefixes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('👋🏼Hello')), [8, 5, 12, 12, 15]);\nassert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('👋🏼 Hello')), [8, 5, 12, 12, 15]);",
                  "err": {},
                  "uuid": "434865c6-4f8b-4fc0-9426-42ff4a725b6a",
                  "parentUUID": "f7a6fddf-b130-43b7-bfc1-1e8524734a7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim emoji postfixes",
                  "fullTitle": "Message static removeEmojisFromChars() should trim emoji postfixes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('Hello👋🏼')), [8, 5, 12, 12, 15]);\nassert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('Hello 👋🏼')), [8, 5, 12, 12, 15]);",
                  "err": {},
                  "uuid": "233b0cf9-35e4-4983-9cd8-6ac1623e8a8b",
                  "parentUUID": "f7a6fddf-b130-43b7-bfc1-1e8524734a7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim emoji words",
                  "fullTitle": "Message static removeEmojisFromChars() should trim emoji words",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.removeEmojisFromChars(Message.string2chars('Hello 👋🏼👋🏼 World')), [8, 5, 12, 12, 15, 0, 23, 15, 18, 12, 4]);",
                  "err": {},
                  "uuid": "0c93da9f-50a5-41a7-92fc-7e2e695cf3f2",
                  "parentUUID": "f7a6fddf-b130-43b7-bfc1-1e8524734a7a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5e7f4052-8584-4e23-a967-06500a102d97",
                "434865c6-4f8b-4fc0-9426-42ff4a725b6a",
                "233b0cf9-35e4-4983-9cd8-6ac1623e8a8b",
                "0c93da9f-50a5-41a7-92fc-7e2e695cf3f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f20e4a5c-dba5-43db-9410-4f60acf894a8",
              "title": "static getColumnSizesFromData()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with a very basic example",
                  "fullTitle": "Message static getColumnSizesFromData() should work with a very basic example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.getColumnSizesFromData([\n    ['now', 'Daily'],\n    ['13:00', 'Secret Meeting']\n]), [6, 15]);",
                  "err": {},
                  "uuid": "41be3297-2266-4e9b-ada0-1a6c8f706e48",
                  "parentUUID": "f20e4a5c-dba5-43db-9410-4f60acf894a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Message static getColumnSizesFromData() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.getColumnSizesFromData([]), []);",
                  "err": {},
                  "uuid": "4b96645a-ecb9-4736-a376-92f341ab769c",
                  "parentUUID": "f20e4a5c-dba5-43db-9410-4f60acf894a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with only one column",
                  "fullTitle": "Message static getColumnSizesFromData() should work with only one column",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.getColumnSizesFromData([\n    ['Daily'],\n    ['Secret Meeting']\n]), [22]);",
                  "err": {},
                  "uuid": "6c05a5e2-cd06-4106-90de-f24e742c4111",
                  "parentUUID": "f20e4a5c-dba5-43db-9410-4f60acf894a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if length is not enough",
                  "fullTitle": "Message static getColumnSizesFromData() should work if length is not enough",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.deepStrictEqual(Message.getColumnSizesFromData([\n    ['now', 'Daily'],\n    ['13:00', 'Super Secret Meeting']\n]), [5, 16]);",
                  "err": {},
                  "uuid": "4280dc5f-f827-4056-a800-ce6a4a23848f",
                  "parentUUID": "f20e4a5c-dba5-43db-9410-4f60acf894a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if rows have different number of columns",
                  "fullTitle": "Message static getColumnSizesFromData() should throw error if rows have different number of columns",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(() => {\n    new Message().table([\n        ['now', 'Daily'],\n        ['13:00', 'Secret Meeting', '🟥']\n    ]);\n}, /Unable to render table: Row 1 has 3 entries, but first row has 2!/);",
                  "err": {},
                  "uuid": "3e487916-3077-4055-b5a4-e077fdf9363d",
                  "parentUUID": "f20e4a5c-dba5-43db-9410-4f60acf894a8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41be3297-2266-4e9b-ada0-1a6c8f706e48",
                "4b96645a-ecb9-4736-a376-92f341ab769c",
                "6c05a5e2-cd06-4106-90de-f24e742c4111",
                "4280dc5f-f827-4056-a800-ce6a4a23848f",
                "3e487916-3077-4055-b5a4-e077fdf9363d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd0c29d5-8ad3-47ca-8b92-e1f8a31a6095",
              "title": "fill()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with default",
                  "fullTitle": "Message fill() should work with default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World');\nmsg.fill();\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "d8ea7847-98a1-476d-bbe1-f0950ccba261",
                  "parentUUID": "cd0c29d5-8ad3-47ca-8b92-e1f8a31a6095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with single chars",
                  "fullTitle": "Message fill() should work with single chars",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "a182262a-a099-4ade-9cd8-60d7c1dbf494",
                  "parentUUID": "cd0c29d5-8ad3-47ca-8b92-e1f8a31a6095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with multiple chars",
                  "fullTitle": "Message fill() should work with multiple chars",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥🟧🟨🟩🟦🟪');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# 🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩 #\\n' +\n    '# 🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧 #\\n' +\n    '# 🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪 #\\n' +\n    '# 🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩 #\\n' +\n    '# 🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧 #\\n' +\n    '# 🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪🟥🟧🟨🟩🟦🟪 #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "1c7b6d04-a2fa-48e3-893e-a521b30b244d",
                  "parentUUID": "cd0c29d5-8ad3-47ca-8b92-e1f8a31a6095",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8ea7847-98a1-476d-bbe1-f0950ccba261",
                "a182262a-a099-4ade-9cd8-60d7c1dbf494",
                "1c7b6d04-a2fa-48e3-893e-a521b30b244d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e26f6803-de4d-4698-953f-82e328c754e0",
              "title": "write()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should start writing from top/left",
                  "fullTitle": "Message write() should start writing from top/left",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# H E L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "d5110e1f-2cd9-4ad4-af17-d469180cfac4",
                  "parentUUID": "e26f6803-de4d-4698-953f-82e328c754e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept line & row for positioning",
                  "fullTitle": "Message write() should accept line & row for positioning",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World', {\n    position: {\n        line: 2,\n        row: 5\n    }\n});\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#           H E L L O   W O R L D              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "0813aff9-d509-4a4b-b5a7-c3b8fd9728ab",
                  "parentUUID": "e26f6803-de4d-4698-953f-82e328c754e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add another line if text is too long",
                  "fullTitle": "Message write() should add another line if text is too long",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Lorem ipsum dolor sit amet, ' +\n    'consetetur sadipscing elitr, sed ' +\n    'diam nonumy eirmod tempor invidunt');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# L O R E M   I P S U M   D O L O R   S I T    #\\n' +\n    '# A M E T ,   C O N S E T E T U R              #\\n' +\n    '# S A D I P S C I N G   E L I T R ,   S E D    #\\n' +\n    '# D I A M   N O N U M Y   E I R M O D          #\\n' +\n    '# T E M P O R   I N V I D U N T                #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "254ea2f3-f708-4b70-9fc9-efa7e39c36f7",
                  "parentUUID": "e26f6803-de4d-4698-953f-82e328c754e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with words > board length",
                  "fullTitle": "Message write() should work with words > board length",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Lorem-ipsum-dolor-sit-amet');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# L O R E M - I P S U M - D O L O R - S I T -  #\\n' +\n    '# A M E T                                      #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "d77eb5fa-36e9-4b55-8eb0-ad9a9390b26e",
                  "parentUUID": "e26f6803-de4d-4698-953f-82e328c754e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow to use NEXT_LINE flag",
                  "fullTitle": "Message write() should allow to use NEXT_LINE flag",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('13:00', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('Daily', { indent: true });\nmsg.write('', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('18:00', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('Fischstäbchen, Spinat & Ei', { indent: true });\nmsg.write('', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('20:00', { position: MessageWritePosition.NEXT_LINE });\nmsg.write('Sandmännchen', { indent: true });\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# 1 3 : 0 0   D A I L Y                        #\\n' +\n    '#                                              #\\n' +\n    '# 1 8 : 0 0   F I S C H S T A E B C H E N ,    #\\n' +\n    '#             S P I N A T   &   E I            #\\n' +\n    '#                                              #\\n' +\n    '# 2 0 : 0 0   S A N D M A E N N C H E N        #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "98e8e665-712f-4801-a845-92ab8415f3fd",
                  "parentUUID": "e26f6803-de4d-4698-953f-82e328c754e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support the NO_SPACE_BETWEEN flag",
                  "fullTitle": "Message write() should support the NO_SPACE_BETWEEN flag",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Rindfleisch')\n    .write('etikettierungs', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('ueberwachungs', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('aufgaben', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('uebertragungs', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('gesetz', { position: MessageWritePosition.NO_SPACE_BETWEEN })\n    .write('(das)');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# R I N D F L E I S C H                        #\\n' +\n    '# E T I K E T T I E R U N G S                  #\\n' +\n    '# U E B E R W A C H U N G S A U F G A B E N    #\\n' +\n    '# U E B E R T R A G U N G S G E S E T Z        #\\n' +\n    '# ( D A S )                                    #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "24213fba-0ea3-4338-a7e9-2ed008ff2c7f",
                  "parentUUID": "e26f6803-de4d-4698-953f-82e328c754e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support \\n",
                  "fullTitle": "Message write() should support \\n",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Message()\n    .write('Hello\\nWorld')\n    .toString(), '#==============================================#\\n' +\n    '# H E L L O                                    #\\n' +\n    '# W O R L D                                    #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');\nassert.strictEqual(new Message()\n    .write('H⍷llo World', { fallbackChar: 0 })\n    .toString(), '#==============================================#\\n' +\n    '# H   L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');\nassert.strictEqual(new Message()\n    .write('H⍷llo World', { fallbackChar: null })\n    .toString(), '#==============================================#\\n' +\n    '# H L L O   W O R L D                          #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "74a2b40a-85a6-4e0d-a003-d9c4f226680e",
                  "parentUUID": "e26f6803-de4d-4698-953f-82e328c754e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle the fallback char",
                  "fullTitle": "Message write() should handle the fallback char",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Message()\n    .write('H⍷llo World')\n    .toString(), '#==============================================#\\n' +\n    '# H ? L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');\nassert.strictEqual(new Message()\n    .write('H⍷llo World', { fallbackChar: 0 })\n    .toString(), '#==============================================#\\n' +\n    '# H   L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');\nassert.strictEqual(new Message()\n    .write('H⍷llo World', { fallbackChar: null })\n    .toString(), '#==============================================#\\n' +\n    '# H L L O   W O R L D                          #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "e7e24cc6-2055-4f22-9287-9e134688c5a1",
                  "parentUUID": "e26f6803-de4d-4698-953f-82e328c754e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove unsupported words by default",
                  "fullTitle": "Message write() should remove unsupported words by default",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('💪🏼 Gym');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# G Y M                                        #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "b9242a1e-41e5-487c-a126-6659d06b1b0a",
                  "parentUUID": "e26f6803-de4d-4698-953f-82e328c754e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not break if message is way too long",
                  "fullTitle": "Message write() should not break if message is way too long",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Lorem ipsum dolor sit amet, consectetur adipisici elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua.');\nmsg.write('Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat.');\nmsg.write('Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.');\nmsg.write('Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.');\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# L O R E M   I P S U M   D O L O R   S I T    #\\n' +\n    '# A M E T ,   C O N S E C T E T U R            #\\n' +\n    '# A D I P I S I C I   E L I T ,   S E D        #\\n' +\n    '# E I U S M O D   T E M P O R I N C I D U N T  #\\n' +\n    '# U T   L A B O R E   E T   D O L O R E        #\\n' +\n    '# M A G N A   A L I Q U A .   U T   E N I M    #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "a57e05d8-6b33-409d-958f-94ab0fc13966",
                  "parentUUID": "e26f6803-de4d-4698-953f-82e328c754e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5110e1f-2cd9-4ad4-af17-d469180cfac4",
                "0813aff9-d509-4a4b-b5a7-c3b8fd9728ab",
                "254ea2f3-f708-4b70-9fc9-efa7e39c36f7",
                "d77eb5fa-36e9-4b55-8eb0-ad9a9390b26e",
                "98e8e665-712f-4801-a845-92ab8415f3fd",
                "24213fba-0ea3-4338-a7e9-2ed008ff2c7f",
                "74a2b40a-85a6-4e0d-a003-d9c4f226680e",
                "e7e24cc6-2055-4f22-9287-9e134688c5a1",
                "b9242a1e-41e5-487c-a126-6659d06b1b0a",
                "a57e05d8-6b33-409d-958f-94ab0fc13966"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "60abebcf-81bb-4d89-b66a-29801d3f85d7",
              "title": "table()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with a very basic example",
                  "fullTitle": "Message table() should work with a very basic example",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.table([\n    ['now', 'Daily'],\n    ['13:00', 'Secret Meeting']\n]);\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# N O W         D A I L Y                      #\\n' +\n    '#                                              #\\n' +\n    '# 1 3 : 0 0     S E C R E T   M E E T I N G    #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "8454d20d-2509-4f53-93fa-54189fcb1949",
                  "parentUUID": "60abebcf-81bb-4d89-b66a-29801d3f85d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should just fill the space available if too full",
                  "fullTitle": "Message table() should just fill the space available if too full",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.table([\n    ['now', 'Daily'],\n    ['13:00', 'Super Secret Meeting'],\n    ['16:30', 'Awesome Presentation']\n]);\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# N O W       D A I L Y                        #\\n' +\n    '#                                              #\\n' +\n    '# 1 3 : 0 0   S U P E R   S E C R E T          #\\n' +\n    '#             M E E T I N G                    #\\n' +\n    '#                                              #\\n' +\n    '# 1 6 : 3 0   A W E S O M E   P R E S E N T -  #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "44778b76-ccf3-4e01-87cc-c64bd824d78c",
                  "parentUUID": "60abebcf-81bb-4d89-b66a-29801d3f85d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pay attention to the cursor",
                  "fullTitle": "Message table() should pay attention to the cursor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World\\n');\nmsg.table([\n    ['now', 'Daily'],\n    ['13:00', 'Secret Meeting']\n]);\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# H E L L O   W O R L D                        #\\n' +\n    '#                                              #\\n' +\n    '# N O W         D A I L Y                      #\\n' +\n    '#                                              #\\n' +\n    '# 1 3 : 0 0     S E C R E T   M E E T I N G    #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "eaaec425-9b4a-4747-b928-95a7dc07ec3e",
                  "parentUUID": "60abebcf-81bb-4d89-b66a-29801d3f85d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if rows have different number of columns",
                  "fullTitle": "Message table() should throw error if rows have different number of columns",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nassert.throws(() => {\n    msg.table([\n        ['now', 'Daily'],\n        ['13:00', 'Secret Meeting', '🟥']\n    ]);\n}, /Unable to render table: Row 1 has 3 entries, but first row has 2!/);",
                  "err": {},
                  "uuid": "e22d87d6-1b5e-45f5-b9a1-0a0e7b51368d",
                  "parentUUID": "60abebcf-81bb-4d89-b66a-29801d3f85d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8454d20d-2509-4f53-93fa-54189fcb1949",
                "44778b76-ccf3-4e01-87cc-c64bd824d78c",
                "eaaec425-9b4a-4747-b928-95a7dc07ec3e",
                "e22d87d6-1b5e-45f5-b9a1-0a0e7b51368d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2ec8d5a2-b976-43a7-a926-054aceb84bfd",
              "title": "center()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/message.ts",
              "file": "/test/lib/message.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with a single word",
                  "fullTitle": "Message center() should work with a single word",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World');\nmsg.center();\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#           H E L L O   W O R L D              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "5c4ef69e-1941-492a-ad15-04d4da55c969",
                  "parentUUID": "2ec8d5a2-b976-43a7-a926-054aceb84bfd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with a complete filled board",
                  "fullTitle": "Message center() should work with a complete filled board",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥');\nmsg.center();\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '# 🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥 #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "eafd39ca-d424-4e31-813e-71f16c963625",
                  "parentUUID": "2ec8d5a2-b976-43a7-a926-054aceb84bfd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if word is not top/left aligned",
                  "fullTitle": "Message center() should also work if word is not top/left aligned",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.write('Hello World', {\n    position: {\n        line: 5,\n        row: 11\n    }\n});\nmsg.center();\nassert.strictEqual(msg.toString(), '#==============================================#\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#           H E L L O   W O R L D              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#                                              #\\n' +\n    '#==============================================#\\n');",
                  "err": {},
                  "uuid": "230dace5-7e4a-4791-8657-1c420ef5544a",
                  "parentUUID": "2ec8d5a2-b976-43a7-a926-054aceb84bfd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c4ef69e-1941-492a-ad15-04d4da55c969",
                "eafd39ca-d424-4e31-813e-71f16c963625",
                "230dace5-7e4a-4791-8657-1c420ef5544a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3c317a41-d83b-4f71-96cb-57fb5c98c32a",
          "title": "MultipleBoard",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/multiple-boards.ts",
          "file": "/test/lib/multiple-boards.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "88070b3f-1eb9-43ea-a44d-4c22c2c7a635",
              "title": "postMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/multiple-boards.ts",
              "file": "/test/lib/multiple-boards.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (live)",
                  "fullTitle": "MultipleBoard postMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "66c870bd-5bfe-4392-ac4c-aeea5728a20d",
                  "parentUUID": "88070b3f-1eb9-43ea-a44d-4c22c2c7a635",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "66c870bd-5bfe-4392-ac4c-aeea5728a20d"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5ecc1603-1ce6-4d23-9a71-c66a9d8f891f",
          "title": "ReadWriteAPI",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/read-write-api.ts",
          "file": "/test/lib/read-write-api.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "82b1f388-7b58-459f-8b7a-446d8d4f18f7",
              "title": "getCurrentMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/read-write-api.ts",
              "file": "/test/lib/read-write-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "ReadWriteAPI getCurrentMessage() should work (mocked)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥🟧🟨🟩🟦🟪');\nconst json = {\n    currentMessage: {\n        layout: JSON.stringify(msg.toCharArray())\n    }\n};\nconst fetch = async (url, options) => {\n    assert.strictEqual(url, 'https://rw.vestaboard.com/');\n    assert.deepStrictEqual(options, {\n        method: 'GET',\n        headers: {\n            'X-Vestaboard-Read-Write-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n        }\n    });\n    return {\n        ok: true,\n        status: 200,\n        statusText: 'OK',\n        json: async () => json\n    };\n};\nconst api = new ReadWriteAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', { fetch });\nconst result = await api.getCurrentMessage();\nassert.deepStrictEqual(result.toCharArray(), msg.toCharArray());",
                  "err": {},
                  "uuid": "e4c21365-834d-4a36-a3ad-c16b30d82a2d",
                  "parentUUID": "82b1f388-7b58-459f-8b7a-446d8d4f18f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "ReadWriteAPI getCurrentMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "1875ff71-cd32-447a-a268-4ad0d2fe9424",
                  "parentUUID": "82b1f388-7b58-459f-8b7a-446d8d4f18f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4c21365-834d-4a36-a3ad-c16b30d82a2d"
              ],
              "failures": [],
              "pending": [
                "1875ff71-cd32-447a-a268-4ad0d2fe9424"
              ],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "459b5096-a304-46c0-b907-4d52c867e96b",
              "title": "postMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/read-write-api.ts",
              "file": "/test/lib/read-write-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "ReadWriteAPI postMessage() should work (mocked)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥🟧🟨🟩🟦🟪');\nconst fetch = async (url, options) => {\n    assert.strictEqual(url, 'https://rw.vestaboard.com/');\n    assert.deepStrictEqual(options, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-Vestaboard-Read-Write-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958'\n        },\n        body: JSON.stringify(msg.toCharArray())\n    });\n    return {\n        ok: true,\n        status: 200,\n        statusText: 'OK',\n        json: async () => ({\n            status: 'ok'\n        })\n    };\n};\nconst api = new ReadWriteAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', { fetch });\nawait api.postMessage(msg);",
                  "err": {},
                  "uuid": "5d76c6f2-6e28-4e60-9242-a170edb44de6",
                  "parentUUID": "459b5096-a304-46c0-b907-4d52c867e96b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "ReadWriteAPI postMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7ad1dfbc-a001-41cb-a02e-fd6203d925be",
                  "parentUUID": "459b5096-a304-46c0-b907-4d52c867e96b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d76c6f2-6e28-4e60-9242-a170edb44de6"
              ],
              "failures": [],
              "pending": [
                "7ad1dfbc-a001-41cb-a02e-fd6203d925be"
              ],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "62384bd6-6f0b-43ee-9db8-82a4462a815b",
          "title": "SubscriptionAPI",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/subscription-api.ts",
          "file": "/test/lib/subscription-api.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4082c51d-e470-4429-b648-cb02b6be164a",
              "title": "getViewer()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/subscription-api.ts",
              "file": "/test/lib/subscription-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "SubscriptionAPI getViewer() should work (mocked)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥🟧🟨🟩🟦🟪');\nconst json = {\n    type: 'installation',\n    _id: 'f35032ce-fd2b-4afb-8a24-d71c8085303c',\n    _created: '1577829607582',\n    installation: {\n        _id: '562038d1-6fdb-4ba5-ae8b-bc9ec882178d'\n    }\n};\nconst fetch = async (url, options) => {\n    assert.strictEqual(url, 'https://platform.vestaboard.com/viewer');\n    assert.deepStrictEqual(options, {\n        method: 'GET',\n        headers: {\n            'X-Vestaboard-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958',\n            'X-Vestaboard-Api-Secret': '******************************'\n        }\n    });\n    return {\n        ok: true,\n        status: 200,\n        statusText: 'OK',\n        json: async () => json\n    };\n};\nconst api = new SubscriptionAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', '******************************', { fetch });\nconst result = await api.getViewer();\nassert.deepStrictEqual(result, json);",
                  "err": {},
                  "uuid": "697ca577-0b8d-4301-a960-9ee8a6332e98",
                  "parentUUID": "4082c51d-e470-4429-b648-cb02b6be164a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "SubscriptionAPI getViewer() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "09ead26c-e693-468c-92bb-6e7402649b3a",
                  "parentUUID": "4082c51d-e470-4429-b648-cb02b6be164a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "697ca577-0b8d-4301-a960-9ee8a6332e98"
              ],
              "failures": [],
              "pending": [
                "09ead26c-e693-468c-92bb-6e7402649b3a"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "1a19694f-51e1-45d8-b58b-989c2569389e",
              "title": "getSubscription()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/subscription-api.ts",
              "file": "/test/lib/subscription-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (mocked)",
                  "fullTitle": "SubscriptionAPI getSubscription() should work (mocked)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const json = {\n    subscriptions: [\n        {\n            _id: 'bc6412b3-3aa6-4684-8962-cd2876942c0d',\n            _created: '1577833654294',\n            installation: {\n                _id: 'fefb8778-9500-4522-b115-29c0dd13c402',\n                installable: {\n                    _id: 'b629d7df-7ecb-4460-b51e-f87fa942f113'\n                }\n            },\n            boards: [{\n                    _id: 'a1e866f2-e77e-45d8-997a-2e3ebeff4961'\n                }]\n        }\n    ]\n};\nconst fetch = async (url, options) => {\n    assert.strictEqual(url, 'https://platform.vestaboard.com/subscriptions');\n    assert.deepStrictEqual(options, {\n        method: 'GET',\n        headers: {\n            'X-Vestaboard-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958',\n            'X-Vestaboard-Api-Secret': '******************************'\n        }\n    });\n    return {\n        ok: true,\n        status: 200,\n        statusText: 'OK',\n        json: async () => json\n    };\n};\nconst api = new SubscriptionAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', '******************************', { fetch });\nconst result = await api.getSubscriptions();\nassert.deepStrictEqual(result, json);",
                  "err": {},
                  "uuid": "d57046df-f220-494b-8dd8-0a9c8d5d8362",
                  "parentUUID": "1a19694f-51e1-45d8-b58b-989c2569389e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "SubscriptionAPI getSubscription() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7eb207cf-fcd7-49b3-8e01-6e6953924176",
                  "parentUUID": "1a19694f-51e1-45d8-b58b-989c2569389e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d57046df-f220-494b-8dd8-0a9c8d5d8362"
              ],
              "failures": [],
              "pending": [
                "7eb207cf-fcd7-49b3-8e01-6e6953924176"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "5368344a-bf25-4eb6-b24a-c6d3e1ea1a22",
              "title": "postMessage()",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/subscription-api.ts",
              "file": "/test/lib/subscription-api.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work (single mode)",
                  "fullTitle": "SubscriptionAPI postMessage() should work (single mode)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const msg = new Message();\nmsg.fill('🟥🟧🟨🟩🟦🟪');\nconst fetch = async (url, options) => {\n    assert.strictEqual(url, 'https://platform.vestaboard.com/subscriptions/foo/message');\n    assert.deepStrictEqual(options, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-Vestaboard-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958',\n            'X-Vestaboard-Api-Secret': '******************************'\n        },\n        body: JSON.stringify({ characters: msg.toCharArray() })\n    });\n    return {\n        ok: true,\n        status: 200,\n        statusText: 'OK',\n        json: async () => ({\n            message: {\n                id: '',\n                created: 1\n            }\n        })\n    };\n};\nconst api = new SubscriptionAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', '******************************', { fetch });\nconst result = await api.postMessage(msg, 'foo');\nassert.deepStrictEqual(result, {\n    message: {\n        id: '',\n        created: 1\n    }\n});",
                  "err": {},
                  "uuid": "ee632a70-fc42-41c8-ab1e-e620613a0ac9",
                  "parentUUID": "5368344a-bf25-4eb6-b24a-c6d3e1ea1a22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (multi mode)",
                  "fullTitle": "SubscriptionAPI postMessage() should work (multi mode)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fetch = async (url, options) => {\n    const msg = new Message('Hello World');\n    assert.strictEqual(url, 'https://platform.vestaboard.com/subscriptions/foo/message');\n    assert.deepStrictEqual(options, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-Vestaboard-Api-Key': '3eadf7a8-6602-4bf5-92f4-970d36066958',\n            'X-Vestaboard-Api-Secret': '******************************'\n        },\n        body: JSON.stringify({ characters: msg.toCharArray() })\n    });\n    return {\n        ok: true,\n        status: 200,\n        statusText: 'OK',\n        json: async () => ({\n            message: {\n                id: '',\n                created: 1\n            }\n        })\n    };\n};\nconst api = new SubscriptionAPI('3eadf7a8-6602-4bf5-92f4-970d36066958', '******************************', { fetch });\nconst result = await api.postMessage('Hello World', ['foo', 'foo']);\nassert.deepStrictEqual(result, [\n    {\n        message: {\n            id: '',\n            created: 1\n        }\n    },\n    {\n        message: {\n            id: '',\n            created: 1\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "d26fc1bc-a98a-4f7c-ad91-68de56a80785",
                  "parentUUID": "5368344a-bf25-4eb6-b24a-c6d3e1ea1a22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work (live)",
                  "fullTitle": "SubscriptionAPI postMessage() should work (live)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b0b711f8-8713-4906-9345-3c80d79ca07d",
                  "parentUUID": "5368344a-bf25-4eb6-b24a-c6d3e1ea1a22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee632a70-fc42-41c8-ab1e-e620613a0ac9",
                "d26fc1bc-a98a-4f7c-ad91-68de56a80785"
              ],
              "failures": [],
              "pending": [
                "b0b711f8-8713-4906-9345-3c80d79ca07d"
              ],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c3fae635-9a3d-49aa-81f2-d363b245f4a4",
          "title": "Tools",
          "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/tools.ts",
          "file": "/test/lib/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6bc3675f-ab58-40fa-b13f-db1f3cd41557",
              "title": "request",
              "fullFile": "/home/runner/work/vestaboard/vestaboard/test/lib/tools.ts",
              "file": "/test/lib/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work as intended",
                  "fullTitle": "Tools request should work as intended",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fetch = async (url, options) => {\n    assert.strictEqual(url, 'https://example.com/test');\n    assert.deepStrictEqual(options, {\n        method: 'GET',\n        headers: {\n            'X-Test-Header': '1337'\n        }\n    });\n    return {\n        ok: true,\n        status: 200,\n        statusText: 'OK',\n        json: async () => ({ foo: 'bar' })\n    };\n};\nconst response = await request('https://example.com/test', {\n    'X-Test-Header': '1337'\n}, undefined, { fetch });\nassert.deepStrictEqual(response, { foo: 'bar' });",
                  "err": {},
                  "uuid": "6046952f-c45d-4455-be6a-df7660658f0c",
                  "parentUUID": "6bc3675f-ab58-40fa-b13f-db1f3cd41557",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on non 2xx status codes",
                  "fullTitle": "Tools request should throw error on non 2xx status codes",
                  "timedOut": false,
                  "duration": 10010,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fetch = async (url, options) => {\n    assert.strictEqual(url, 'https://example.com/test');\n    assert.deepStrictEqual(options, {\n        method: 'GET',\n        headers: {\n            'X-Test-Header': '1337'\n        }\n    });\n    return {\n        ok: false,\n        status: 500,\n        statusText: 'ERROR',\n        json: async () => ('')\n    };\n};\nawait assert.rejects(async () => {\n    await request('https://example.com/test', {\n        'X-Test-Header': '1337'\n    }, undefined, { fetch });\n}, /HTTP Request failed/);",
                  "err": {},
                  "uuid": "5abe4687-c4ac-486e-9566-4b7e81027c7c",
                  "parentUUID": "6bc3675f-ab58-40fa-b13f-db1f3cd41557",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6046952f-c45d-4455-be6a-df7660658f0c",
                "5abe4687-c4ac-486e-9566-4b7e81027c7c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10010,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}